// <auto-generated />
using System;
using FitSwipe.DataAccess.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitSwipe.DataAccess.Migrations
{
    [DbContext(typeof(FitSwipeDbContext))]
    [Migration("20241003142158_Add_Table_For_Chatting_Realtime")]
    partial class Add_Table_For_Chatting_Realtime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ChatRoom");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Params")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22ec258e-7958-492d-ab08-216a09623e4b"),
                            Body = "Chào mừng bạn đến với FitWipe! Kính gửi [Name], vui lòng xác nhận địa chỉ email của bạn bằng cách nhấn vào đường link sau: <a href=\"[VerificationLink]\">Xác nhận Email</a>.<br><br>Cảm ơn bạn đã tham gia cùng chúng tôi!<br><br>Đội ngũ FitWipe",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7780),
                            Description = "Email này được gửi để xác nhận đăng ký tài khoản FitWipe.",
                            Name = "Register_Mail",
                            Params = "[Name], [VerificationLink]",
                            RecordStatus = 0,
                            Status = true,
                            Subject = "Chào mừng đến với FitWipe! Vui lòng xác nhận email của bạn"
                        },
                        new
                        {
                            Id = new Guid("6cfa782e-8fb0-439c-817a-3501777cc2be"),
                            Body = "Chúng tôi đã nhận được yêu cầu đặt lại mật khẩu cho tài khoản của bạn tại FitWipe. Kính gửi [Name], vui lòng đặt lại mật khẩu của bạn bằng cách nhấn vào đường link sau: <a href=\"[ResetPasswordLink]\">Đặt lại mật khẩu</a>.<br><br>Nếu bạn không yêu cầu việc này, vui lòng bỏ qua email này.<br><br>Đội ngũ FitWipe",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7803),
                            Description = "Email này được gửi khi người dùng yêu cầu đặt lại mật khẩu cho tài khoản FitWipe.",
                            Name = "Forgot_Password",
                            Params = "[Name], [ResetPasswordLink]",
                            RecordStatus = 0,
                            Status = true,
                            Subject = "Yêu cầu đặt lại mật khẩu FitWipe"
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.FeedbackImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("FeedbackImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFirebaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("UserFirebaseId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TargetId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ReportImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int?>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("TrainingId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.SlotVideos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("SlotVideos");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialTag")
                        .HasColumnType("integer");

                    b.Property<string>("TagImage")
                        .HasColumnType("text");

                    b.Property<int>("TagType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("886ae848-7f85-43dc-a8e1-a18dc0895869"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7566),
                            Name = "Bóng đá",
                            RecordStatus = 0,
                            TagImage = "https://cdn.tuoitre.vn/ttct//2020/12/13/16078750289060-lich-thi-dau-bong-da-hom-nay-0211.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("43ec96e4-8d3e-4f01-ac36-c76626ac3317"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7571),
                            Name = "Bơi lội",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/1000391576/file/boi_loi_7d4d69c53ac1494eabb2a446d4d503a0_grande.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("1eacd9c4-24b6-4198-9ae5-c47af28eb138"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7572),
                            Name = "Cầu Lông",
                            RecordStatus = 0,
                            TagImage = "https://vecgroup.vn/images/products/2021/08/24/large/qua-cau-long_1629778779.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("98adbeba-ee5a-466b-9794-98cbf4612c40"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7574),
                            Name = "Bóng chuyền",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/200000333667/article/image.jpg_4b1e1c8ce20f4c32824f275f34ff30af_1024x1024.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("7d2904d7-a3e4-4c48-a526-fa3d8ef65d5b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7580),
                            Name = "Bóng rổ",
                            RecordStatus = 0,
                            TagImage = "https://thethaothienlong.vn/wp-content/uploads/2022/04/Kich-thuoc-qua-bong-ro-1.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("6ac2508f-3a1c-453c-864b-0fa76598cf00"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7582),
                            Name = "Thể thao nói chung",
                            RecordStatus = 0,
                            TagImage = "https://llv.edu.vn/media/2018/09/iStock-949190756-800x440.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("bc222c1c-4704-4b96-bab3-4cb910181624"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7583),
                            Name = "Bida",
                            RecordStatus = 0,
                            TagImage = "https://billiardshoanthuy.vn/wp-content/uploads/2021/05/phu-kien-ban-bida-2.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("94991376-6603-4646-b998-1d8bd91d1430"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7585),
                            Name = "Tập Gym",
                            RecordStatus = 0,
                            TagImage = "https://tiki.vn/blog/wp-content/uploads/2023/07/elite-fitness-1024x583.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("970b36d4-703f-4020-a6fd-ea195dcf57ec"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7587),
                            Name = "Đi, chạy bộ",
                            RecordStatus = 0,
                            TagImage = "https://pos.nvncdn.com/be3294-43017/art/artCT/20230228_9uObLfWys7Q0IXe4.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("07c9b81b-b757-484d-92df-42827f4edb5d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7588),
                            Name = "Phim ảnh",
                            RecordStatus = 0,
                            TagImage = "https://lawnet.vn/uploads/image/2023/10/17/015815855.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("b64ca38d-0bbe-497c-9f04-15b92cf640e7"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7590),
                            Name = "Truyện tranh",
                            RecordStatus = 0,
                            TagImage = "https://taschen.makaira.media/taschen/image/upload/f_webp,w_1200/v1673462260/products-live/a3d446fb0046b587eb0ed76edca3f4d6.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("c5a5f7b7-784f-4520-8738-44451bc23b2b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7591),
                            Name = "Du lịch",
                            RecordStatus = 0,
                            TagImage = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/18/4f/7d/fc/caption.jpg?w=1200&h=1200&s=1",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("b7a08b56-a766-477b-91c8-7e8af1b42ce5"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7595),
                            Name = "Thể thao trí tuệ",
                            RecordStatus = 0,
                            TagImage = "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/ChessSet.jpg/640px-ChessSet.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("34776aa4-b491-49f8-9cd6-715363657e69"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7597),
                            Name = "Đọc sách",
                            RecordStatus = 0,
                            TagImage = "https://images.theconversation.com/files/45159/original/rptgtpxd-1396254731.jpg?ixlib=rb-4.1.0&q=45&auto=format&w=1356&h=668&fit=crop",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("10a50f12-e646-47dc-baf9-8a7d6d1a0ed4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7598),
                            Name = "Khoa học",
                            RecordStatus = 0,
                            TagImage = "https://www.training.com.au/wp-content/uploads/science-stem-feature.png",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("c0c47e2d-45dd-4bde-93b3-033aef710544"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7600),
                            Name = "Game",
                            RecordStatus = 0,
                            TagImage = "https://genk.mediacdn.vn/139269124445442048/2022/7/28/tmb-1658998970448906989995.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("49cbb02e-f212-4765-92e0-c922b14a9c73"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7602),
                            Name = "Nhiếp ảnh",
                            RecordStatus = 0,
                            TagImage = "https://aaftonline.com/blog/wp-content/uploads/2024/01/What-are-the-Benefits-of-Photography-Complete-Overview.png",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("8a0fb0c1-ffaf-4636-b058-93f88d0f9cda"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7603),
                            Name = "Hội họa",
                            RecordStatus = 0,
                            TagImage = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/1200px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("3361bbb4-905d-4731-819e-760a7c262306"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7605),
                            Name = "Nghe nhạc",
                            RecordStatus = 0,
                            TagImage = "https://static.vecteezy.com/system/resources/thumbnails/037/044/052/small_2x/ai-generated-studio-shot-of-black-headphones-over-music-note-explosion-background-with-empty-space-for-text-photo.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("d4d3237a-c90c-46ac-b1e3-48bfbd343ffd"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7607),
                            Name = "Chơi nhạc cụ",
                            RecordStatus = 0,
                            TagImage = "https://t3.ftcdn.net/jpg/01/34/38/92/360_F_134389281_5Jak3tbsoDggHIfIKKwJ8L7064ACIMNE.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("f47316fa-a007-4a52-a20a-116d2fcb50f3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7610),
                            Name = "Tán gẫu",
                            RecordStatus = 0,
                            TagImage = "https://transcode-v2.app.engoo.com/image/fetch/f_auto,c_lfill,w_300,dpr_3/https://assets.app.engoo.com/images/rGTEEA2fm66YMzeJz2UbwkKOW62bZVlqKOKZrXlMN7g.jpeg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("7fdef875-f46b-4730-8dcb-c236106921a4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7612),
                            Name = "Công nghệ",
                            RecordStatus = 0,
                            TagImage = "https://www.simplilearn.com/ice9/free_resources_article_thumb/Technology_Trends.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("449a90d0-c84c-448d-9650-bedc8df6b721"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7613),
                            Name = "Lịch Sử",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRWz_tIgvQXPAaSmvYa7CqZo_biaRK9D_O8uA&s",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("5e3237f3-667d-4bf3-8ef2-fdf19df96575"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7615),
                            Name = "Địa lý",
                            RecordStatus = 0,
                            TagImage = "https://www.aag.org/wp-content/uploads/2021/12/shutterstock_1111879247.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("c378eca7-6336-4b35-89e6-198ff66faa0d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7618),
                            Name = "Triết học",
                            RecordStatus = 0,
                            TagImage = "https://www.rollingstone.com/wp-content/uploads/2024/01/unlocking_the_power_why_you_should_consider_hiring_philosophy_graduates-.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("7fe87a79-fccc-467c-a467-215856e2bc2a"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7620),
                            Name = "Sống Ảo",
                            RecordStatus = 0,
                            TagImage = "https://imagev3.vietnamplus.vn/w1000/Uploaded/2024/hotnnz/2024_08_13/song-ao3-6646.jpg.webp",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("398ff589-ed7c-4a13-9af7-f8128ce56d76"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7622),
                            Name = "Quản lý cân nặng",
                            RecordStatus = 0,
                            TagImage = "https://thanhnien.mediacdn.vn/Uploaded/minhnguyet/2022_05_10/an-kieng-9141.jpg",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("9667fc39-7934-4dcf-8cbb-0fbacdf37ce0"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7623),
                            Name = "Phát triển cơ bắp",
                            RecordStatus = 0,
                            TagImage = "https://www.dmoose.com/cdn/shop/articles/feature-image_87a28752-6da3-4be8-8814-d5221236136d.jpg?v=1676644951",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("dc184cd9-9828-412c-ba7e-9a88529a5f10"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7627),
                            Name = "Có body chuẩn chỉnh",
                            RecordStatus = 0,
                            TagImage = "https://cdn.nhathuoclongchau.com.vn/unsafe/800x0/https://cms-prod.s3-sgn09.fptcloud.com/fitness_la_gi_loi_ich_va_phuong_phap_tap_luyen_fitness_1_3c4e094223.png",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("cd535567-5cbf-4a69-853c-2fb4bcdb71a4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7628),
                            Name = "Phòng tránh bệnh",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv509Yw7GUN5twNNk4G5Pvu1TBqFmhrL_3UQ&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("174f6ae7-5491-426c-93a5-32660ee61190"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7630),
                            Name = "Cải thiện tình trạng bệnh",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv509Yw7GUN5twNNk4G5Pvu1TBqFmhrL_3UQ&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("0f78dc08-41d1-4f72-9af4-b8ea8ed90b8e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7632),
                            Name = "Tăng cảm giác hạnh phúc, giảm căng thẳng",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8ZXc_bemAYbupxmGz0pZGy4L1Zr6hGVsYdA&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("6979ea44-8be2-4d3a-b7cd-57ae160fd101"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7633),
                            Name = "Cải thiện sự dẻo dai",
                            RecordStatus = 0,
                            TagImage = "https://cdn.shopify.com/s/files/1/0453/0381/files/fullsizeoutput_2d4_1024x1024.jpg?v=1662646979",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("97413666-fde4-480e-8c50-c6c8952d2c25"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7635),
                            Name = "Cải thiện sức bền",
                            RecordStatus = 0,
                            TagImage = "https://vinmec-prod.s3.amazonaws.com/images/20210524_085806_814180_chay-bo-bao-nhieu-cal.max-800x800.jpg",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("8a1183e3-4b3e-42e2-a66f-f60e246dd144"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7637),
                            Name = "Cải thiện sức khỏe tổng quát",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcThCjFemkP0h0IZYpu31k-xGK9IvigaysteqA&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("02e91999-97e7-4eab-a6f0-6ce99ef12d47"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7639),
                            Name = "Yoga / Pilates",
                            RecordStatus = 0,
                            TagImage = "https://thamtapyoga.vn/wp-content/uploads/2024/01/3-2.jpeg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("75ff233c-ca86-4309-918f-782f2b0c0a9b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7642),
                            Name = "Calisthenic",
                            RecordStatus = 0,
                            TagImage = "https://cdn.nhathuoclongchau.com.vn/unsafe/800x0/https://cms-prod.s3-sgn09.fptcloud.com/giai_dap_thac_mac_calisthenics_khac_gi_gym_1_8d5dd4026b.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("b6414e17-3a7a-4371-882f-a3d538ce0ac8"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7644),
                            Name = "Tập sức mạnh",
                            RecordStatus = 0,
                            TagImage = "https://www.thethaothientruong.vn/uploads/2020/Powerlifting-la-gi.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("6cdb9d20-2149-46b6-8b04-c7da4ee4b2b7"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7646),
                            Name = "Cardio",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/1000308068/file/tap-cardio-vao-luc-nao-la-hieu-qua-nhat_cb884317c05d4df980138121ee113112_grande.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("3c9bbb59-d489-4155-a29e-63e4053a118b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7647),
                            Name = "HIIT",
                            RecordStatus = 0,
                            TagImage = "https://hips.hearstapps.com/hmg-prod/images/athletes-doing-push-ups-with-dumbbells-on-floor-royalty-free-image-1638463573.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("501c338c-c2f2-4151-a99b-b9c2f9aecc1d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7649),
                            Name = "Kickfit",
                            RecordStatus = 0,
                            TagImage = "https://storage.googleapis.com/leep_app_website/2020/11/Kick-fit-khong-phai-la-kick-boxing.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("d8347015-a7a4-48fb-90ec-d647a813e0b5"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7650),
                            Name = "Tập ép dẻo",
                            RecordStatus = 0,
                            TagImage = "https://prod-everyoneactive-wp.s3.eu-west-2.amazonaws.com/wp-content/uploads/2020/03/23151503/flexibility-at-home.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("49b3bb31-8117-4443-a117-edb8f2a3bf9b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7652),
                            Name = "Thể dục nhịp điệu, theo nhạc",
                            RecordStatus = 0,
                            TagImage = "https://i.vietgiaitri.com/2018/10/9/the-duc-nhip-dieu-b2ab9f.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("7e819bc2-d2ca-457d-aefe-326f264c3348"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7654),
                            Name = "Cùng giới",
                            RecordStatus = 0,
                            SpecialTag = 1,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("aa89997b-a937-4503-a6f3-0cc14cfef073"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7659),
                            Name = "Khác giới",
                            RecordStatus = 0,
                            SpecialTag = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("0fa7c5fe-0e9f-4a24-9eed-81d1c9cb41cb"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7661),
                            Name = "Ngoại hình đẹp",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("4495e43d-4f1e-4290-a76c-c04ff8b69ddd"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7663),
                            Name = "Cung cấp giá cả phải chăng",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("23061dad-35a0-4b19-93fe-1bc52879ee63"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7674),
                            Name = "Gần",
                            RecordStatus = 0,
                            SpecialTag = 2,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("daa2956a-2177-45e2-93fb-a248f6a47024"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7676),
                            Name = "Tâm huyết với học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("a9bb656c-709f-4015-9f4e-cd6f83708aa5"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7677),
                            Name = "Có trách nhiệm",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("b3ab7fa5-1e10-43e6-bfdd-817ad380ff0c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7679),
                            Name = "Có kinh nghiệm",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("77b79b26-391f-47b2-9df0-a448093dc3f3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7680),
                            Name = "Không nặng nề với học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("c792a42e-d9ff-4945-a816-05752f61eca2"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7684),
                            Name = "Giàu kiến thức",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("dbf3a817-5fa5-48bb-acfb-8bea7bc1e82e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7685),
                            Name = "Luôn sẵn sàng tư vấn ngoài giờ",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("3e9e7bbc-8fbe-4205-99eb-9d65a9f38b68"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7687),
                            Name = "Biết truyền cảm hứng, tạo động lực",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("69fa736e-25ea-4028-94b9-16c71c6f4392"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7688),
                            Name = "Đảm bảo mục tiêu cho học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("13f695e7-5752-4fc1-8be0-d418332fc007"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7690),
                            Name = "Kiên trì",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("ec6b93e4-ba24-4736-8491-71dc5e3665ce"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7691),
                            Name = "Siêng năng",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("a76e7bd2-bfa2-4200-937c-52acea97d338"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7693),
                            Name = "Vui tính, hài hước",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("c23ee31b-11fc-495f-bef8-0c8f20e9e07f"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7695),
                            Name = "Hòa đồng",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("b8ef3a73-ec80-4546-be6b-7c3b984a0300"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7698),
                            Name = "Năng động",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("7a701f2c-68ab-4e8f-ba32-7c408796eae0"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7699),
                            Name = "Dễ gần",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("3d56443c-38fe-4157-aab8-aed04a5af9f3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7701),
                            Name = "Thi thoảng bất thường",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("9584188e-af40-4fa6-9fe4-cc222fa36565"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7702),
                            Name = "Lạnh lùng, ít nói",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("0628cccc-1d5e-4898-afec-0bd166aa4c2e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7704),
                            Name = "Nhút nhát",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("00efa009-bb6d-4cfc-8076-4371982d62f2"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7705),
                            Name = "Nhạy cảm",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("1d72ca89-4187-47f7-bbf7-9f967bac681a"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7707),
                            Name = "Dễ nản",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("7653db23-b9ac-4282-a6df-a28829b6256c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7708),
                            Name = "Hay bị lười",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("4934df40-1fc2-436a-a597-695fbd1c9271"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7712),
                            Name = "Sẵn sàng học hỏi",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("0cf7a331-af01-4eef-9fc8-1f69990724b9"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7713),
                            Name = "Hiền lành",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("827e2284-cc23-4e5d-ada2-ab79d45e95da"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7715),
                            Name = "Rảnh rỗi",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("e634f0be-0ff2-48a7-b162-8aba42c82262"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7716),
                            Name = "Cầu toàn",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("90de2233-37f7-4baf-adf0-7470bcd95134"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7718),
                            Name = "Thoải mái",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("8c5856f8-93a7-4225-9946-72cfa1a8b901"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7719),
                            Name = "Dễ bị khó chịu",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("e93bb680-ade3-42a3-9ec5-479626f3f541"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7721),
                            Name = "Độc thân lâu năm",
                            RecordStatus = 0,
                            TagType = 4
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<string>("PTId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TraineeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PTId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TranscationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFireBaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserFireBaseId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.TransactionSlot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionSlots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.User", b =>
                {
                    b.Property<string>("FireBaseId")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<int?>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<string>("PTDegreeImageUrl")
                        .HasColumnType("text");

                    b.Property<double?>("PTExperienceYear")
                        .HasColumnType("double precision");

                    b.Property<double?>("PTRating")
                        .HasColumnType("double precision");

                    b.Property<int?>("PTStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<double>("PricePerHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0.0);

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<int?>("SubscriptionLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("SubscriptionPaymentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubscriptionPurchasedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ward")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("FireBaseId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            FireBaseId = "123abc",
                            AvatarUrl = "https://i.ibb.co/HYsHmpm/pt5.png",
                            Balance = 1000,
                            Bio = "Fitness enthusiast and certified personal trainer.",
                            City = "New York",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7180),
                            DateOfBirth = new DateTime(1990, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Manhattan",
                            Email = "john.doe@example.com",
                            Gender = 0,
                            Height = 180.30000000000001,
                            Id = new Guid("022462a1-ab66-43b8-9534-12d13d92f92d"),
                            Job = "Student",
                            Password = "hashedpassword1",
                            Phone = "1234567890",
                            PricePerHour = 0.0,
                            RecordStatus = 0,
                            Role = 0,
                            Status = 0,
                            Street = "5th Avenue",
                            UserName = "john doe",
                            Ward = "Ward 5",
                            Weight = 75.5
                        },
                        new
                        {
                            FireBaseId = "456def",
                            AvatarUrl = "https://i.ibb.co/ZVhq6W7/c239694df88fecb8c521de3dd8625ba10fbbfa14f3559342640b9710e25b9d01-w-1024-h-1024-pmaid-165228136.png",
                            Balance = 1500,
                            Bio = "Yoga instructor with a passion for holistic health.",
                            City = "Los Angeles",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7236),
                            DateOfBirth = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Beverly Hills",
                            Email = "jane.smith@example.com",
                            Gender = 1,
                            Height = 170.19999999999999,
                            Id = new Guid("1fb1cc67-6925-44ea-a603-0551a12235a0"),
                            Job = "Yoga Instructor",
                            PTExperienceYear = 3.5,
                            PTStatus = 1,
                            Password = "hashedpassword2",
                            Phone = "0987654321",
                            PricePerHour = 100000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Rodeo Drive",
                            SubscriptionLevel = 1,
                            SubscriptionPaymentStatus = 0,
                            SubscriptionPurchasedDate = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "jane smith",
                            Ward = "Ward 3",
                            Weight = 65.0
                        },
                        new
                        {
                            FireBaseId = "789ghi",
                            AvatarUrl = "https://i.ibb.co/zVGS1Xv/pt1.png",
                            Balance = 2000,
                            Bio = "Aspiring bodybuilder and nutrition expert.",
                            City = "Chicago",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7246),
                            DateOfBirth = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Lincoln Park",
                            Email = "alex.jones@example.com",
                            Gender = 0,
                            Height = 185.40000000000001,
                            Id = new Guid("2f4ddb5b-a486-46b8-bea3-50fbff0d35ae"),
                            Job = "Nutritionist",
                            PTExperienceYear = 2.0,
                            PTStatus = 1,
                            Password = "hashedpassword3",
                            Phone = "5551234567",
                            PricePerHour = 150000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Clark Street",
                            UserName = "alex jones",
                            Ward = "Ward 7",
                            Weight = 85.0
                        },
                        new
                        {
                            FireBaseId = "101jkl",
                            AvatarUrl = "https://i.ibb.co/QY6zDfp/pt3.png",
                            Balance = 3500,
                            Bio = "Certified yoga instructor and personal trainer with 5 years of experience.",
                            City = "New York",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7254),
                            DateOfBirth = new DateTime(1988, 7, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Manhattan",
                            Email = "sarah.smith@example.com",
                            Gender = 0,
                            Height = 170.19999999999999,
                            Id = new Guid("f7dfa554-a9ad-46ed-aed6-274000f1f325"),
                            Job = "Yoga Instructor",
                            PTExperienceYear = 5.0,
                            PTStatus = 1,
                            Password = "hashedpassword4",
                            Phone = "5559876543",
                            PricePerHour = 200000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Broadway",
                            UserName = "jocker_lol",
                            Ward = "Ward 3",
                            Weight = 62.5
                        },
                        new
                        {
                            FireBaseId = "202mno",
                            AvatarUrl = "https://i.ibb.co/27LXG3q/pt4.png",
                            Balance = 2800,
                            Bio = "CrossFit enthusiast and certified personal trainer specializing in HIIT workouts.",
                            City = "Los Angeles",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7260),
                            DateOfBirth = new DateTime(1995, 11, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Santa Monica",
                            Email = "mike.johnson@example.com",
                            Gender = 0,
                            Height = 180.0,
                            Id = new Guid("65b4013a-088b-4be1-ac74-da58c3352f87"),
                            Job = "CrossFit Trainer",
                            PTExperienceYear = 3.5,
                            PTStatus = 1,
                            Password = "hashedpassword5",
                            Phone = "5552468101",
                            PricePerHour = 180000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Ocean Avenue",
                            UserName = "mike_johnson",
                            Ward = "Ward 2",
                            Weight = 78.299999999999997
                        },
                        new
                        {
                            FireBaseId = "303pqr",
                            AvatarUrl = "https://i.ibb.co/TWNFj0M/image.png",
                            Balance = 4200,
                            Bio = "Sports nutritionist and strength training coach with a focus on women's fitness.",
                            City = "Seattle",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7265),
                            DateOfBirth = new DateTime(1990, 5, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Capitol Hill",
                            Email = "emma.davis@example.com",
                            Gender = 1,
                            Height = 165.5,
                            Id = new Guid("15598f43-0bf4-4374-bc54-f71c2b54b4bd"),
                            Job = "Strength Coach",
                            PTExperienceYear = 7.0,
                            PTStatus = 1,
                            Password = "hashedpassword6",
                            Phone = "5553691470",
                            PricePerHour = 220000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Pike Street",
                            UserName = "emma_davis",
                            Ward = "Ward 5",
                            Weight = 58.700000000000003
                        },
                        new
                        {
                            FireBaseId = "404stu",
                            AvatarUrl = "https://i.ibb.co/mR8n9zJ/pt2.png",
                            Balance = 3800,
                            Bio = "Former professional soccer player turned fitness coach. Specializes in sports-specific training.",
                            City = "Miami",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7294),
                            DateOfBirth = new DateTime(1987, 9, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "South Beach",
                            Email = "carlos.rodriguez@example.com",
                            Gender = 0,
                            Height = 175.30000000000001,
                            Id = new Guid("e9aae356-6974-453b-bc2f-457091ef6f33"),
                            Job = "Sports Performance Coach",
                            PTExperienceYear = 6.5,
                            PTStatus = 1,
                            Password = "hashedpassword7",
                            Phone = "5557891234",
                            PricePerHour = 190000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Ocean Drive",
                            UserName = "carlos_rodriguez",
                            Ward = "Ward 4",
                            Weight = 75.799999999999997
                        },
                        new
                        {
                            FireBaseId = "505vwx",
                            AvatarUrl = "https://i.ibb.co/dDrHRqL/40c820d3e9d438025d4def0dedeab78a883cb8ab8c34614d1fb7d5ddf147668e-w-1024-h-1024-pmaid-165229888.png",
                            Balance = 3200,
                            Bio = "Pilates instructor and rehabilitation specialist. Focused on posture correction and core strength.",
                            City = "San Francisco",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7299),
                            DateOfBirth = new DateTime(1993, 2, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Marina",
                            Email = "lisa.chen@example.com",
                            Gender = 1,
                            Height = 162.0,
                            Id = new Guid("3710b397-ee72-4911-b029-a1aecda558c5"),
                            Job = "Pilates Instructor",
                            PTExperienceYear = 4.0,
                            PTStatus = 1,
                            Password = "hashedpassword8",
                            Phone = "5554567890",
                            PricePerHour = 175000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Chestnut Street",
                            UserName = "lisa_chen",
                            Ward = "Ward 2",
                            Weight = 54.200000000000003
                        },
                        new
                        {
                            FireBaseId = "606yza",
                            AvatarUrl = "https://i.ibb.co/QY6zDfp/pt3.png",
                            Balance = 4500,
                            Bio = "Bodybuilding champion and powerlifting coach. Specializes in muscle gain and strength training.",
                            City = "Houston",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7304),
                            DateOfBirth = new DateTime(1985, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Midtown",
                            Email = "marcus.brown@example.com",
                            Gender = 0,
                            Height = 188.0,
                            Id = new Guid("710574a2-2c13-45f6-9d50-e2d7c8fe4fb7"),
                            Job = "Strength and Conditioning Coach",
                            PTExperienceYear = 10.0,
                            PTStatus = 1,
                            Password = "hashedpassword9",
                            Phone = "5552345678",
                            PricePerHour = 230000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Main Street",
                            UserName = "marcus_brown",
                            Ward = "Ward 3",
                            Weight = 90.5
                        },
                        new
                        {
                            FireBaseId = "707bcd",
                            AvatarUrl = "https://i.ibb.co/HYsHmpm/pt5.png",
                            Balance = 3900,
                            Bio = "Certified nutritionist and functional fitness trainer. Specializes in weight management and holistic health.",
                            City = "Boston",
                            CreatedDate = new DateTime(2024, 10, 3, 14, 21, 57, 388, DateTimeKind.Utc).AddTicks(7310),
                            DateOfBirth = new DateTime(1991, 12, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Back Bay",
                            Email = "will.taylor@example.com",
                            Gender = 0,
                            Height = 168.5,
                            Id = new Guid("5ae97f3f-ec91-4f87-a093-df48ae26ae86"),
                            Job = "Functional Fitness Trainer",
                            PTExperienceYear = 3.5,
                            PTStatus = 1,
                            Password = "hashedpassword10",
                            Phone = "5558765432",
                            PricePerHour = 195000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Newbury Street",
                            UserName = "will_taylor",
                            Ward = "Ward 5",
                            Weight = 60.100000000000001
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserChatRoom", b =>
                {
                    b.Property<string>("UserFirebaseId")
                        .HasColumnType("text");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserFirebaseId", "ChatRoomId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("UserChatRoom");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedias");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.FeedbackImage", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Training", "Training")
                        .WithMany("FeedbackImages")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Message", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserFirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Reporter")
                        .WithMany("ReportsCreated")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Target")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reporter");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ReportImage", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Report", "Report")
                        .WithMany("ReportImages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "CreateBy")
                        .WithMany("SlotsCreated")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Training", "Training")
                        .WithMany("Slots")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateBy");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.SlotVideos", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Slot", "Slot")
                        .WithMany("Videos")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "CreateBy")
                        .WithMany("TagsCreated")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "PT")
                        .WithMany("TrainingsInstructing")
                        .HasForeignKey("PTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Trainee")
                        .WithMany("TrainingsAttending")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PT");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserFireBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.TransactionSlot", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Slot", "Slot")
                        .WithMany("TransactionSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Transaction", "Transaction")
                        .WithMany("TransactionSlots")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserChatRoom", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserFirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserMedia", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserTag", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ChatRoom", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.Navigation("ReportImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.Navigation("TransactionSlots");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.Navigation("FeedbackImages");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.Navigation("TransactionSlots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("ReportsCreated");

                    b.Navigation("ReportsReceived");

                    b.Navigation("SlotsCreated");

                    b.Navigation("TagsCreated");

                    b.Navigation("TrainingsAttending");

                    b.Navigation("TrainingsInstructing");

                    b.Navigation("Transactions");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserMedias");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using FitSwipe.DataAccess.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitSwipe.DataAccess.Migrations
{
    [DbContext(typeof(FitSwipeDbContext))]
    [Migration("20241004031552_Update_Property_For_Realtime_Chatting")]
    partial class Update_Property_For_Realtime_Chatting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Params")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cb7f275-d2b4-4fa8-84c6-ba462d317ad7"),
                            Body = "Chào mừng bạn đến với FitWipe! Kính gửi [Name], vui lòng xác nhận địa chỉ email của bạn bằng cách nhấn vào đường link sau: <a href=\"[VerificationLink]\">Xác nhận Email</a>.<br><br>Cảm ơn bạn đã tham gia cùng chúng tôi!<br><br>Đội ngũ FitWipe",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8802),
                            Description = "Email này được gửi để xác nhận đăng ký tài khoản FitWipe.",
                            Name = "Register_Mail",
                            Params = "[Name], [VerificationLink]",
                            RecordStatus = 0,
                            Status = true,
                            Subject = "Chào mừng đến với FitWipe! Vui lòng xác nhận email của bạn"
                        },
                        new
                        {
                            Id = new Guid("1088ebda-9d83-425c-ad28-885a758b8a48"),
                            Body = "Chúng tôi đã nhận được yêu cầu đặt lại mật khẩu cho tài khoản của bạn tại FitWipe. Kính gửi [Name], vui lòng đặt lại mật khẩu của bạn bằng cách nhấn vào đường link sau: <a href=\"[ResetPasswordLink]\">Đặt lại mật khẩu</a>.<br><br>Nếu bạn không yêu cầu việc này, vui lòng bỏ qua email này.<br><br>Đội ngũ FitWipe",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8822),
                            Description = "Email này được gửi khi người dùng yêu cầu đặt lại mật khẩu cho tài khoản FitWipe.",
                            Name = "Forgot_Password",
                            Params = "[Name], [ResetPasswordLink]",
                            RecordStatus = 0,
                            Status = true,
                            Subject = "Yêu cầu đặt lại mật khẩu FitWipe"
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.FeedbackImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("FeedbackImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFirebaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("UserFirebaseId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TargetId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ReportImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int?>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("TrainingId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.SlotVideos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("SlotVideos");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialTag")
                        .HasColumnType("integer");

                    b.Property<string>("TagImage")
                        .HasColumnType("text");

                    b.Property<int>("TagType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db9d6bdf-42c3-4381-8887-5c3a5beebb4e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8541),
                            Name = "Bóng đá",
                            RecordStatus = 0,
                            TagImage = "https://cdn.tuoitre.vn/ttct//2020/12/13/16078750289060-lich-thi-dau-bong-da-hom-nay-0211.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("e7481ce0-412d-4964-8b88-88031525fb30"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8544),
                            Name = "Bơi lội",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/1000391576/file/boi_loi_7d4d69c53ac1494eabb2a446d4d503a0_grande.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("b5839c12-6b6e-4b32-bcd9-364542953cd6"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8546),
                            Name = "Cầu Lông",
                            RecordStatus = 0,
                            TagImage = "https://vecgroup.vn/images/products/2021/08/24/large/qua-cau-long_1629778779.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("bb5846f8-e192-4eb7-bd32-7ce7c1e25535"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8548),
                            Name = "Bóng chuyền",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/200000333667/article/image.jpg_4b1e1c8ce20f4c32824f275f34ff30af_1024x1024.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("22465e4e-dd44-455b-a3ea-ac634f103513"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8549),
                            Name = "Bóng rổ",
                            RecordStatus = 0,
                            TagImage = "https://thethaothienlong.vn/wp-content/uploads/2022/04/Kich-thuoc-qua-bong-ro-1.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("bd72993b-146c-4b26-afd8-0e2e57e9f475"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8551),
                            Name = "Thể thao nói chung",
                            RecordStatus = 0,
                            TagImage = "https://llv.edu.vn/media/2018/09/iStock-949190756-800x440.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("85a50e7b-fe1a-4b0a-9972-4c8c27b6020f"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8553),
                            Name = "Bida",
                            RecordStatus = 0,
                            TagImage = "https://billiardshoanthuy.vn/wp-content/uploads/2021/05/phu-kien-ban-bida-2.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("ed1218ff-7b08-4000-96ed-f9a1d2cc933e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8556),
                            Name = "Tập Gym",
                            RecordStatus = 0,
                            TagImage = "https://tiki.vn/blog/wp-content/uploads/2023/07/elite-fitness-1024x583.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("00f7e862-dbbd-4eeb-a608-a600c17a8d11"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8558),
                            Name = "Đi, chạy bộ",
                            RecordStatus = 0,
                            TagImage = "https://pos.nvncdn.com/be3294-43017/art/artCT/20230228_9uObLfWys7Q0IXe4.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("5b76ee68-a0ca-499b-a085-6466003a3fcb"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8560),
                            Name = "Phim ảnh",
                            RecordStatus = 0,
                            TagImage = "https://lawnet.vn/uploads/image/2023/10/17/015815855.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("43124093-336b-43cf-92ed-34d06fcb508d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8561),
                            Name = "Truyện tranh",
                            RecordStatus = 0,
                            TagImage = "https://taschen.makaira.media/taschen/image/upload/f_webp,w_1200/v1673462260/products-live/a3d446fb0046b587eb0ed76edca3f4d6.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("7429d1dc-b209-45bb-af1c-2a15b514bae9"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8563),
                            Name = "Du lịch",
                            RecordStatus = 0,
                            TagImage = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/18/4f/7d/fc/caption.jpg?w=1200&h=1200&s=1",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("d2f5641c-c2e0-40dd-aff7-34d0c4fcbee0"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8564),
                            Name = "Thể thao trí tuệ",
                            RecordStatus = 0,
                            TagImage = "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/ChessSet.jpg/640px-ChessSet.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("ef8360d6-621b-4184-adfb-82be447c2a7d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8566),
                            Name = "Đọc sách",
                            RecordStatus = 0,
                            TagImage = "https://images.theconversation.com/files/45159/original/rptgtpxd-1396254731.jpg?ixlib=rb-4.1.0&q=45&auto=format&w=1356&h=668&fit=crop",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("150968ad-a609-434c-9b1a-4e71fe2a31ae"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8568),
                            Name = "Khoa học",
                            RecordStatus = 0,
                            TagImage = "https://www.training.com.au/wp-content/uploads/science-stem-feature.png",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("ad23c5c3-3361-4182-a245-4acee3b9d068"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8572),
                            Name = "Game",
                            RecordStatus = 0,
                            TagImage = "https://genk.mediacdn.vn/139269124445442048/2022/7/28/tmb-1658998970448906989995.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("1906f7b8-36ce-41c1-9b27-f90e2be09c10"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8574),
                            Name = "Nhiếp ảnh",
                            RecordStatus = 0,
                            TagImage = "https://aaftonline.com/blog/wp-content/uploads/2024/01/What-are-the-Benefits-of-Photography-Complete-Overview.png",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("8ad6e980-637f-46a3-b705-93fe8012658a"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8575),
                            Name = "Hội họa",
                            RecordStatus = 0,
                            TagImage = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/1200px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("e13d682f-4a00-4654-b5a1-c0c69239a9ab"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8577),
                            Name = "Nghe nhạc",
                            RecordStatus = 0,
                            TagImage = "https://static.vecteezy.com/system/resources/thumbnails/037/044/052/small_2x/ai-generated-studio-shot-of-black-headphones-over-music-note-explosion-background-with-empty-space-for-text-photo.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("1ba6c05c-7b9e-4738-ae40-f6d023acbf91"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8579),
                            Name = "Chơi nhạc cụ",
                            RecordStatus = 0,
                            TagImage = "https://t3.ftcdn.net/jpg/01/34/38/92/360_F_134389281_5Jak3tbsoDggHIfIKKwJ8L7064ACIMNE.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("ae70cc07-1b6c-4de3-b797-365c258dba2e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8580),
                            Name = "Tán gẫu",
                            RecordStatus = 0,
                            TagImage = "https://transcode-v2.app.engoo.com/image/fetch/f_auto,c_lfill,w_300,dpr_3/https://assets.app.engoo.com/images/rGTEEA2fm66YMzeJz2UbwkKOW62bZVlqKOKZrXlMN7g.jpeg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("9aa5a039-d7cc-4bf0-be28-1ccab2374c46"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8582),
                            Name = "Công nghệ",
                            RecordStatus = 0,
                            TagImage = "https://www.simplilearn.com/ice9/free_resources_article_thumb/Technology_Trends.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("9f16f1d4-2138-4023-9cba-606a6954de94"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8584),
                            Name = "Lịch Sử",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRWz_tIgvQXPAaSmvYa7CqZo_biaRK9D_O8uA&s",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("a87f2e98-bf60-40f2-85c5-29a2e2ae419b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8587),
                            Name = "Địa lý",
                            RecordStatus = 0,
                            TagImage = "https://www.aag.org/wp-content/uploads/2021/12/shutterstock_1111879247.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("9b23533e-377c-4983-b86f-52e7f4b85903"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8589),
                            Name = "Triết học",
                            RecordStatus = 0,
                            TagImage = "https://www.rollingstone.com/wp-content/uploads/2024/01/unlocking_the_power_why_you_should_consider_hiring_philosophy_graduates-.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("4c7d54bc-7c33-4973-8407-9a4978c92a2f"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8590),
                            Name = "Sống Ảo",
                            RecordStatus = 0,
                            TagImage = "https://imagev3.vietnamplus.vn/w1000/Uploaded/2024/hotnnz/2024_08_13/song-ao3-6646.jpg.webp",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("499d68e1-1dcc-44cf-b64c-e0296055b810"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8592),
                            Name = "Quản lý cân nặng",
                            RecordStatus = 0,
                            TagImage = "https://thanhnien.mediacdn.vn/Uploaded/minhnguyet/2022_05_10/an-kieng-9141.jpg",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("e3aba9e5-3cb4-45ae-a176-86e0fe493c7d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8594),
                            Name = "Phát triển cơ bắp",
                            RecordStatus = 0,
                            TagImage = "https://www.dmoose.com/cdn/shop/articles/feature-image_87a28752-6da3-4be8-8814-d5221236136d.jpg?v=1676644951",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("3f9b4574-34df-44a2-b7f9-1ef059bac82d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8595),
                            Name = "Có body chuẩn chỉnh",
                            RecordStatus = 0,
                            TagImage = "https://cdn.nhathuoclongchau.com.vn/unsafe/800x0/https://cms-prod.s3-sgn09.fptcloud.com/fitness_la_gi_loi_ich_va_phuong_phap_tap_luyen_fitness_1_3c4e094223.png",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("33e38af7-14df-467d-b4cb-b1eed627cc86"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8597),
                            Name = "Phòng tránh bệnh",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv509Yw7GUN5twNNk4G5Pvu1TBqFmhrL_3UQ&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("527c5ad5-f53f-4cd8-af93-0b7b62a82ded"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8599),
                            Name = "Cải thiện tình trạng bệnh",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv509Yw7GUN5twNNk4G5Pvu1TBqFmhrL_3UQ&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("1cf648db-5a73-480a-ad0e-427f3cc37e4b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8602),
                            Name = "Tăng cảm giác hạnh phúc, giảm căng thẳng",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8ZXc_bemAYbupxmGz0pZGy4L1Zr6hGVsYdA&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("1f3ef91e-f673-4350-ab94-8ad1252bdde8"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8603),
                            Name = "Cải thiện sự dẻo dai",
                            RecordStatus = 0,
                            TagImage = "https://cdn.shopify.com/s/files/1/0453/0381/files/fullsizeoutput_2d4_1024x1024.jpg?v=1662646979",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("6005034c-f627-4482-b9e6-bd80ec61564c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8605),
                            Name = "Cải thiện sức bền",
                            RecordStatus = 0,
                            TagImage = "https://vinmec-prod.s3.amazonaws.com/images/20210524_085806_814180_chay-bo-bao-nhieu-cal.max-800x800.jpg",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("c529175b-4ea8-4d27-b712-eb205ae2a748"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8629),
                            Name = "Cải thiện sức khỏe tổng quát",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcThCjFemkP0h0IZYpu31k-xGK9IvigaysteqA&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("4af816c9-4ce9-43f4-88d9-ebc938212ebf"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8631),
                            Name = "Yoga / Pilates",
                            RecordStatus = 0,
                            TagImage = "https://thamtapyoga.vn/wp-content/uploads/2024/01/3-2.jpeg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("e2f87e5a-5b2b-43b9-bae2-95495b94295f"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8632),
                            Name = "Calisthenic",
                            RecordStatus = 0,
                            TagImage = "https://cdn.nhathuoclongchau.com.vn/unsafe/800x0/https://cms-prod.s3-sgn09.fptcloud.com/giai_dap_thac_mac_calisthenics_khac_gi_gym_1_8d5dd4026b.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("581a0087-cc79-4075-8c71-9c807a8b82f0"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8634),
                            Name = "Tập sức mạnh",
                            RecordStatus = 0,
                            TagImage = "https://www.thethaothientruong.vn/uploads/2020/Powerlifting-la-gi.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("8008bf4b-7ef1-41b8-a476-8e9920589f80"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8636),
                            Name = "Cardio",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/1000308068/file/tap-cardio-vao-luc-nao-la-hieu-qua-nhat_cb884317c05d4df980138121ee113112_grande.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("6fe2eb53-c4c8-49aa-ac27-a2bf81a3e5bb"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8639),
                            Name = "HIIT",
                            RecordStatus = 0,
                            TagImage = "https://hips.hearstapps.com/hmg-prod/images/athletes-doing-push-ups-with-dumbbells-on-floor-royalty-free-image-1638463573.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("701d94ec-2c41-4cdd-84c2-8fe1f3326873"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8641),
                            Name = "Kickfit",
                            RecordStatus = 0,
                            TagImage = "https://storage.googleapis.com/leep_app_website/2020/11/Kick-fit-khong-phai-la-kick-boxing.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("bd57e151-e026-4c04-b9f2-7e40bdf437e0"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8643),
                            Name = "Tập ép dẻo",
                            RecordStatus = 0,
                            TagImage = "https://prod-everyoneactive-wp.s3.eu-west-2.amazonaws.com/wp-content/uploads/2020/03/23151503/flexibility-at-home.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("a5a03ee8-4b74-4487-b126-5590645df20f"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8644),
                            Name = "Thể dục nhịp điệu, theo nhạc",
                            RecordStatus = 0,
                            TagImage = "https://i.vietgiaitri.com/2018/10/9/the-duc-nhip-dieu-b2ab9f.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("0fa6852c-bfb7-4f17-87c4-5503cd334ca9"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8646),
                            Name = "Cùng giới",
                            RecordStatus = 0,
                            SpecialTag = 1,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("eca2138d-f128-4b55-a453-91d15898aea4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8648),
                            Name = "Khác giới",
                            RecordStatus = 0,
                            SpecialTag = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("49b361f2-07a0-4ffb-b489-a93d602d6629"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8649),
                            Name = "Ngoại hình đẹp",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("8e42f639-9d23-4ae3-aa07-1e057c81226a"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8651),
                            Name = "Cung cấp giá cả phải chăng",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("3e945985-9a75-4491-8bee-9f89cb77f7b3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8654),
                            Name = "Gần",
                            RecordStatus = 0,
                            SpecialTag = 2,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("07542823-898c-4b82-8d5c-4efa31d8d6e7"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8656),
                            Name = "Tâm huyết với học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("44a27be3-9f88-4ccd-aa2f-fd0d0ce8019e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8657),
                            Name = "Có trách nhiệm",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("994b6279-6027-4525-ab51-e6c1f63d1142"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8659),
                            Name = "Có kinh nghiệm",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("e6c91982-f8f2-4740-9ef3-e23186dfff61"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8660),
                            Name = "Không nặng nề với học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("0e86e285-a1af-4348-95f4-f4f6c499e7bf"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8662),
                            Name = "Giàu kiến thức",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("d15b6a12-0296-46d5-95d3-4152c63ece19"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8664),
                            Name = "Luôn sẵn sàng tư vấn ngoài giờ",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("95f10990-3cac-459d-9d0a-590afe82d395"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8665),
                            Name = "Biết truyền cảm hứng, tạo động lực",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("40faaab5-1d84-49ef-8f0f-40a447d946ce"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8668),
                            Name = "Đảm bảo mục tiêu cho học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("5a2f2306-dc81-4ebb-af05-0559a9bc6392"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8670),
                            Name = "Kiên trì",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("c640ad21-e4b2-4607-8c7d-e757bb7c2a46"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8671),
                            Name = "Siêng năng",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("8be2943e-69c2-4214-a6a5-45ed573b454c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8673),
                            Name = "Vui tính, hài hước",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("5b272c69-948a-445d-b901-745f52e58b9c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8674),
                            Name = "Hòa đồng",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("ada5731e-12b8-4c0e-8ab8-c079b04eabb8"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8676),
                            Name = "Năng động",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("1fe84570-aa36-489d-b30e-7d174b46ba60"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8678),
                            Name = "Dễ gần",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("ac40ed89-1a89-4ef7-90d4-566c68314f53"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8680),
                            Name = "Thi thoảng bất thường",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("7a584c25-4d4f-437b-a2b5-79f58d6589ec"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8683),
                            Name = "Lạnh lùng, ít nói",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("db871eb8-8663-4703-8c6b-997d827a080d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8684),
                            Name = "Nhút nhát",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("026563e1-2934-43bf-9e60-b81c21fdc0ca"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8686),
                            Name = "Nhạy cảm",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("82a9ddfa-001c-43f4-abdd-f27dc031d6f9"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Dễ nản",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("5fb4e449-be5e-4959-a138-682280153964"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8689),
                            Name = "Hay bị lười",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("b1287b3f-7999-4154-9499-7dc4c5fee0ec"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8690),
                            Name = "Sẵn sàng học hỏi",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("ed8d2783-2828-484b-89bb-bc20bf3969ae"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8692),
                            Name = "Hiền lành",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("40b06200-a101-4c24-894d-3075872a87a7"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8694),
                            Name = "Rảnh rỗi",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("46a322cd-1d5a-45e0-a011-07e606fd9a2a"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8697),
                            Name = "Cầu toàn",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("384c20c8-c284-4184-9d83-10e0ba517d2d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8698),
                            Name = "Thoải mái",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("a171a83c-849b-48c0-bb06-66c948bb1f64"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8700),
                            Name = "Dễ bị khó chịu",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("4628e6d1-46d5-4b8c-a3d8-0a1d2fdeb4b8"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8702),
                            Name = "Độc thân lâu năm",
                            RecordStatus = 0,
                            TagType = 4
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<string>("PTId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TraineeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PTId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TranscationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFireBaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserFireBaseId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.TransactionSlot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionSlots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.User", b =>
                {
                    b.Property<string>("FireBaseId")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<int?>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<string>("PTDegreeImageUrl")
                        .HasColumnType("text");

                    b.Property<double?>("PTExperienceYear")
                        .HasColumnType("double precision");

                    b.Property<double?>("PTRating")
                        .HasColumnType("double precision");

                    b.Property<int?>("PTStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<double>("PricePerHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0.0);

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<int?>("SubscriptionLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("SubscriptionPaymentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubscriptionPurchasedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ward")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("FireBaseId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            FireBaseId = "123abc",
                            AvatarUrl = "https://i.ibb.co/HYsHmpm/pt5.png",
                            Balance = 1000,
                            Bio = "Fitness enthusiast and certified personal trainer.",
                            City = "New York",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8182),
                            DateOfBirth = new DateTime(1990, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Manhattan",
                            Email = "john.doe@example.com",
                            Gender = 0,
                            Height = 180.30000000000001,
                            Id = new Guid("ee7e4f28-03d0-4b7c-a606-52669be8222b"),
                            Job = "Student",
                            Password = "hashedpassword1",
                            Phone = "1234567890",
                            PricePerHour = 0.0,
                            RecordStatus = 0,
                            Role = 0,
                            Status = 0,
                            Street = "5th Avenue",
                            UserName = "john doe",
                            Ward = "Ward 5",
                            Weight = 75.5
                        },
                        new
                        {
                            FireBaseId = "456def",
                            AvatarUrl = "https://i.ibb.co/ZVhq6W7/c239694df88fecb8c521de3dd8625ba10fbbfa14f3559342640b9710e25b9d01-w-1024-h-1024-pmaid-165228136.png",
                            Balance = 1500,
                            Bio = "Yoga instructor with a passion for holistic health.",
                            City = "Los Angeles",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8282),
                            DateOfBirth = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Beverly Hills",
                            Email = "jane.smith@example.com",
                            Gender = 1,
                            Height = 170.19999999999999,
                            Id = new Guid("5ed410f6-f630-4744-9e70-950c2e14a7f8"),
                            Job = "Yoga Instructor",
                            PTExperienceYear = 3.5,
                            PTStatus = 1,
                            Password = "hashedpassword2",
                            Phone = "0987654321",
                            PricePerHour = 100000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Rodeo Drive",
                            SubscriptionLevel = 1,
                            SubscriptionPaymentStatus = 0,
                            SubscriptionPurchasedDate = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "jane smith",
                            Ward = "Ward 3",
                            Weight = 65.0
                        },
                        new
                        {
                            FireBaseId = "789ghi",
                            AvatarUrl = "https://i.ibb.co/zVGS1Xv/pt1.png",
                            Balance = 2000,
                            Bio = "Aspiring bodybuilder and nutrition expert.",
                            City = "Chicago",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8292),
                            DateOfBirth = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Lincoln Park",
                            Email = "alex.jones@example.com",
                            Gender = 0,
                            Height = 185.40000000000001,
                            Id = new Guid("e057336e-f525-46f3-94b1-3eb6d9a20335"),
                            Job = "Nutritionist",
                            PTExperienceYear = 2.0,
                            PTStatus = 1,
                            Password = "hashedpassword3",
                            Phone = "5551234567",
                            PricePerHour = 150000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Clark Street",
                            UserName = "alex jones",
                            Ward = "Ward 7",
                            Weight = 85.0
                        },
                        new
                        {
                            FireBaseId = "101jkl",
                            AvatarUrl = "https://i.ibb.co/QY6zDfp/pt3.png",
                            Balance = 3500,
                            Bio = "Certified yoga instructor and personal trainer with 5 years of experience.",
                            City = "New York",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8298),
                            DateOfBirth = new DateTime(1988, 7, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Manhattan",
                            Email = "sarah.smith@example.com",
                            Gender = 0,
                            Height = 170.19999999999999,
                            Id = new Guid("172ce872-fecb-43dd-baa8-b06e7df64e56"),
                            Job = "Yoga Instructor",
                            PTExperienceYear = 5.0,
                            PTStatus = 1,
                            Password = "hashedpassword4",
                            Phone = "5559876543",
                            PricePerHour = 200000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Broadway",
                            UserName = "jocker_lol",
                            Ward = "Ward 3",
                            Weight = 62.5
                        },
                        new
                        {
                            FireBaseId = "202mno",
                            AvatarUrl = "https://i.ibb.co/27LXG3q/pt4.png",
                            Balance = 2800,
                            Bio = "CrossFit enthusiast and certified personal trainer specializing in HIIT workouts.",
                            City = "Los Angeles",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8304),
                            DateOfBirth = new DateTime(1995, 11, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Santa Monica",
                            Email = "mike.johnson@example.com",
                            Gender = 0,
                            Height = 180.0,
                            Id = new Guid("96814efd-6fc8-49e6-9e97-879f97c4c7a0"),
                            Job = "CrossFit Trainer",
                            PTExperienceYear = 3.5,
                            PTStatus = 1,
                            Password = "hashedpassword5",
                            Phone = "5552468101",
                            PricePerHour = 180000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Ocean Avenue",
                            UserName = "mike_johnson",
                            Ward = "Ward 2",
                            Weight = 78.299999999999997
                        },
                        new
                        {
                            FireBaseId = "303pqr",
                            AvatarUrl = "https://i.ibb.co/TWNFj0M/image.png",
                            Balance = 4200,
                            Bio = "Sports nutritionist and strength training coach with a focus on women's fitness.",
                            City = "Seattle",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8309),
                            DateOfBirth = new DateTime(1990, 5, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Capitol Hill",
                            Email = "emma.davis@example.com",
                            Gender = 1,
                            Height = 165.5,
                            Id = new Guid("59511d77-e088-41a9-b63e-46cd6438d6bf"),
                            Job = "Strength Coach",
                            PTExperienceYear = 7.0,
                            PTStatus = 1,
                            Password = "hashedpassword6",
                            Phone = "5553691470",
                            PricePerHour = 220000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Pike Street",
                            UserName = "emma_davis",
                            Ward = "Ward 5",
                            Weight = 58.700000000000003
                        },
                        new
                        {
                            FireBaseId = "404stu",
                            AvatarUrl = "https://i.ibb.co/mR8n9zJ/pt2.png",
                            Balance = 3800,
                            Bio = "Former professional soccer player turned fitness coach. Specializes in sports-specific training.",
                            City = "Miami",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8315),
                            DateOfBirth = new DateTime(1987, 9, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "South Beach",
                            Email = "carlos.rodriguez@example.com",
                            Gender = 0,
                            Height = 175.30000000000001,
                            Id = new Guid("04ce47a3-eadf-4f18-a3e3-d9b16a51b0a2"),
                            Job = "Sports Performance Coach",
                            PTExperienceYear = 6.5,
                            PTStatus = 1,
                            Password = "hashedpassword7",
                            Phone = "5557891234",
                            PricePerHour = 190000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Ocean Drive",
                            UserName = "carlos_rodriguez",
                            Ward = "Ward 4",
                            Weight = 75.799999999999997
                        },
                        new
                        {
                            FireBaseId = "505vwx",
                            AvatarUrl = "https://i.ibb.co/dDrHRqL/40c820d3e9d438025d4def0dedeab78a883cb8ab8c34614d1fb7d5ddf147668e-w-1024-h-1024-pmaid-165229888.png",
                            Balance = 3200,
                            Bio = "Pilates instructor and rehabilitation specialist. Focused on posture correction and core strength.",
                            City = "San Francisco",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8320),
                            DateOfBirth = new DateTime(1993, 2, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Marina",
                            Email = "lisa.chen@example.com",
                            Gender = 1,
                            Height = 162.0,
                            Id = new Guid("59103d79-1386-4f1c-a856-50ecbd09e82a"),
                            Job = "Pilates Instructor",
                            PTExperienceYear = 4.0,
                            PTStatus = 1,
                            Password = "hashedpassword8",
                            Phone = "5554567890",
                            PricePerHour = 175000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Chestnut Street",
                            UserName = "lisa_chen",
                            Ward = "Ward 2",
                            Weight = 54.200000000000003
                        },
                        new
                        {
                            FireBaseId = "606yza",
                            AvatarUrl = "https://i.ibb.co/QY6zDfp/pt3.png",
                            Balance = 4500,
                            Bio = "Bodybuilding champion and powerlifting coach. Specializes in muscle gain and strength training.",
                            City = "Houston",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8356),
                            DateOfBirth = new DateTime(1985, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Midtown",
                            Email = "marcus.brown@example.com",
                            Gender = 0,
                            Height = 188.0,
                            Id = new Guid("a71b47fd-000c-4fc4-97cb-4081dbad1f81"),
                            Job = "Strength and Conditioning Coach",
                            PTExperienceYear = 10.0,
                            PTStatus = 1,
                            Password = "hashedpassword9",
                            Phone = "5552345678",
                            PricePerHour = 230000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Main Street",
                            UserName = "marcus_brown",
                            Ward = "Ward 3",
                            Weight = 90.5
                        },
                        new
                        {
                            FireBaseId = "707bcd",
                            AvatarUrl = "https://i.ibb.co/HYsHmpm/pt5.png",
                            Balance = 3900,
                            Bio = "Certified nutritionist and functional fitness trainer. Specializes in weight management and holistic health.",
                            City = "Boston",
                            CreatedDate = new DateTime(2024, 10, 4, 3, 15, 52, 251, DateTimeKind.Utc).AddTicks(8364),
                            DateOfBirth = new DateTime(1991, 12, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Back Bay",
                            Email = "will.taylor@example.com",
                            Gender = 0,
                            Height = 168.5,
                            Id = new Guid("38a5f00c-ab27-42d4-a807-184b39dd6bc0"),
                            Job = "Functional Fitness Trainer",
                            PTExperienceYear = 3.5,
                            PTStatus = 1,
                            Password = "hashedpassword10",
                            Phone = "5558765432",
                            PricePerHour = 195000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Newbury Street",
                            UserName = "will_taylor",
                            Ward = "Ward 5",
                            Weight = 60.100000000000001
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserChatRoom", b =>
                {
                    b.Property<string>("UserFirebaseId")
                        .HasColumnType("text");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserFirebaseId", "ChatRoomId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("UserChatRooms");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedias");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.FeedbackImage", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Training", "Training")
                        .WithMany("FeedbackImages")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Message", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserFirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Reporter")
                        .WithMany("ReportsCreated")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Target")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reporter");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ReportImage", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Report", "Report")
                        .WithMany("ReportImages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "CreateBy")
                        .WithMany("SlotsCreated")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Training", "Training")
                        .WithMany("Slots")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateBy");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.SlotVideos", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Slot", "Slot")
                        .WithMany("Videos")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "CreateBy")
                        .WithMany("TagsCreated")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "PT")
                        .WithMany("TrainingsInstructing")
                        .HasForeignKey("PTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Trainee")
                        .WithMany("TrainingsAttending")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PT");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserFireBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.TransactionSlot", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Slot", "Slot")
                        .WithMany("TransactionSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Transaction", "Transaction")
                        .WithMany("TransactionSlots")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserChatRoom", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserFirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserMedia", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserTag", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ChatRoom", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.Navigation("ReportImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.Navigation("TransactionSlots");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.Navigation("FeedbackImages");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.Navigation("TransactionSlots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("ReportsCreated");

                    b.Navigation("ReportsReceived");

                    b.Navigation("SlotsCreated");

                    b.Navigation("TagsCreated");

                    b.Navigation("TrainingsAttending");

                    b.Navigation("TrainingsInstructing");

                    b.Navigation("Transactions");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserMedias");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}

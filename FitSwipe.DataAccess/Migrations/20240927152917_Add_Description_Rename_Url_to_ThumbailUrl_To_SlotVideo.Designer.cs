// <auto-generated />
using System;
using FitSwipe.DataAccess.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitSwipe.DataAccess.Migrations
{
    [DbContext(typeof(FitSwipeDbContext))]
    [Migration("20240927152917_Add_Description_Rename_Url_to_ThumbailUrl_To_SlotVideo")]
    partial class Add_Description_Rename_Url_to_ThumbailUrl_To_SlotVideo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Params")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9dab181d-e92c-4c96-8639-58aca36dd0af"),
                            Body = "Chào mừng bạn đến với FitWipe! Kính gửi [Name], vui lòng xác nhận địa chỉ email của bạn bằng cách nhấn vào đường link sau: <a href=\"[VerificationLink]\">Xác nhận Email</a>.<br><br>Cảm ơn bạn đã tham gia cùng chúng tôi!<br><br>Đội ngũ FitWipe",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9444),
                            Description = "Email này được gửi để xác nhận đăng ký tài khoản FitWipe.",
                            Name = "Register_Mail",
                            Params = "[Name], [VerificationLink]",
                            RecordStatus = 0,
                            Status = true,
                            Subject = "Chào mừng đến với FitWipe! Vui lòng xác nhận email của bạn"
                        },
                        new
                        {
                            Id = new Guid("b63a8267-fd8e-4afb-b2ef-1363896b704d"),
                            Body = "Chúng tôi đã nhận được yêu cầu đặt lại mật khẩu cho tài khoản của bạn tại FitWipe. Kính gửi [Name], vui lòng đặt lại mật khẩu của bạn bằng cách nhấn vào đường link sau: <a href=\"[ResetPasswordLink]\">Đặt lại mật khẩu</a>.<br><br>Nếu bạn không yêu cầu việc này, vui lòng bỏ qua email này.<br><br>Đội ngũ FitWipe",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9460),
                            Description = "Email này được gửi khi người dùng yêu cầu đặt lại mật khẩu cho tài khoản FitWipe.",
                            Name = "Forgot_Password",
                            Params = "[Name], [ResetPasswordLink]",
                            RecordStatus = 0,
                            Status = true,
                            Subject = "Yêu cầu đặt lại mật khẩu FitWipe"
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.FeedbackImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("FeedbackImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TargetId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ReportImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<int?>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("TrainingId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.SlotVideos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("SlotVideos");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TagImage")
                        .HasColumnType("text");

                    b.Property<int>("TagType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd4cb8b9-d1b9-4ce9-902d-9accd17bf8dc"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9219),
                            Name = "Bóng đá",
                            RecordStatus = 0,
                            TagImage = "https://cdn.tuoitre.vn/ttct//2020/12/13/16078750289060-lich-thi-dau-bong-da-hom-nay-0211.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("53604545-8806-43f6-bb9c-021c20c49a28"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9222),
                            Name = "Bơi lội",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/1000391576/file/boi_loi_7d4d69c53ac1494eabb2a446d4d503a0_grande.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("5b69a218-a081-4026-8c72-9d0b4f6ec4a4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9224),
                            Name = "Cầu Lông",
                            RecordStatus = 0,
                            TagImage = "https://vecgroup.vn/images/products/2021/08/24/large/qua-cau-long_1629778779.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("1899247b-bb23-4737-bc9e-6cefd64362d9"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9261),
                            Name = "Bóng chuyền",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/200000333667/article/image.jpg_4b1e1c8ce20f4c32824f275f34ff30af_1024x1024.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("2087e966-862f-43ae-b5ec-483244ee2ba8"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9263),
                            Name = "Bóng rổ",
                            RecordStatus = 0,
                            TagImage = "https://thethaothienlong.vn/wp-content/uploads/2022/04/Kich-thuoc-qua-bong-ro-1.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("16f271c1-681e-4acb-8bd7-1948a03d5c72"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9265),
                            Name = "Thể thao nói chung",
                            RecordStatus = 0,
                            TagImage = "https://llv.edu.vn/media/2018/09/iStock-949190756-800x440.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("ae1f7c21-73c9-499a-a36d-a6de9fa0c6c6"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9268),
                            Name = "Bida",
                            RecordStatus = 0,
                            TagImage = "https://billiardshoanthuy.vn/wp-content/uploads/2021/05/phu-kien-ban-bida-2.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("bc8ffbcd-bb17-447c-bef7-9d0db02663c4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9270),
                            Name = "Tập Gym",
                            RecordStatus = 0,
                            TagImage = "https://tiki.vn/blog/wp-content/uploads/2023/07/elite-fitness-1024x583.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("95de61bd-41a5-4df6-9cae-bb184060a4e2"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9271),
                            Name = "Đi, chạy bộ",
                            RecordStatus = 0,
                            TagImage = "https://pos.nvncdn.com/be3294-43017/art/artCT/20230228_9uObLfWys7Q0IXe4.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("71b56b91-6da1-44cd-8350-a23d78c67a61"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9273),
                            Name = "Phim ảnh",
                            RecordStatus = 0,
                            TagImage = "https://lawnet.vn/uploads/image/2023/10/17/015815855.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("671b87b7-574d-447f-8107-cfcbdca95175"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9274),
                            Name = "Truyện tranh",
                            RecordStatus = 0,
                            TagImage = "https://taschen.makaira.media/taschen/image/upload/f_webp,w_1200/v1673462260/products-live/a3d446fb0046b587eb0ed76edca3f4d6.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("9e7b2860-11ad-44da-8819-98e40dab668b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9276),
                            Name = "Du lịch",
                            RecordStatus = 0,
                            TagImage = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/18/4f/7d/fc/caption.jpg?w=1200&h=1200&s=1",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("d575d79b-d131-4f46-b11a-66f68689d6d1"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9277),
                            Name = "Thể thao trí tuệ",
                            RecordStatus = 0,
                            TagImage = "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/ChessSet.jpg/640px-ChessSet.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("0673e71d-c5cb-4747-8f23-ab533f26190e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9278),
                            Name = "Đọc sách",
                            RecordStatus = 0,
                            TagImage = "https://images.theconversation.com/files/45159/original/rptgtpxd-1396254731.jpg?ixlib=rb-4.1.0&q=45&auto=format&w=1356&h=668&fit=crop",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("249b4ac0-df18-45a1-8d31-ef3accaad67a"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9281),
                            Name = "Khoa học",
                            RecordStatus = 0,
                            TagImage = "https://www.training.com.au/wp-content/uploads/science-stem-feature.png",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("0ded48af-c30e-4a3c-8783-fead5ee70d30"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9282),
                            Name = "Game",
                            RecordStatus = 0,
                            TagImage = "https://genk.mediacdn.vn/139269124445442048/2022/7/28/tmb-1658998970448906989995.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("6b273813-1626-4bc6-81a1-bf9b40984ba7"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9283),
                            Name = "Nhiếp ảnh",
                            RecordStatus = 0,
                            TagImage = "https://aaftonline.com/blog/wp-content/uploads/2024/01/What-are-the-Benefits-of-Photography-Complete-Overview.png",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("6028368c-4f5a-4375-80d2-ab128e1c1bed"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9285),
                            Name = "Hội họa",
                            RecordStatus = 0,
                            TagImage = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/1200px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("5fadddba-d1db-46e5-8a65-118f74289531"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9286),
                            Name = "Nghe nhạc",
                            RecordStatus = 0,
                            TagImage = "https://static.vecteezy.com/system/resources/thumbnails/037/044/052/small_2x/ai-generated-studio-shot-of-black-headphones-over-music-note-explosion-background-with-empty-space-for-text-photo.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("ac15103e-b4c5-4d4f-a1dc-eabded5de807"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9287),
                            Name = "Chơi nhạc cụ",
                            RecordStatus = 0,
                            TagImage = "https://t3.ftcdn.net/jpg/01/34/38/92/360_F_134389281_5Jak3tbsoDggHIfIKKwJ8L7064ACIMNE.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("078017a8-7b62-412a-81b1-901aa73724e4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9289),
                            Name = "Tán gẫu",
                            RecordStatus = 0,
                            TagImage = "https://transcode-v2.app.engoo.com/image/fetch/f_auto,c_lfill,w_300,dpr_3/https://assets.app.engoo.com/images/rGTEEA2fm66YMzeJz2UbwkKOW62bZVlqKOKZrXlMN7g.jpeg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("654bcd13-d808-42b6-8b3a-2d21e71fb97d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9290),
                            Name = "Công nghệ",
                            RecordStatus = 0,
                            TagImage = "https://www.simplilearn.com/ice9/free_resources_article_thumb/Technology_Trends.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("a90b18b3-d2e8-4dcc-b1d7-6f6f8ba689ea"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9293),
                            Name = "Lịch Sử",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRWz_tIgvQXPAaSmvYa7CqZo_biaRK9D_O8uA&s",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("c33797eb-24bb-4042-a110-0ff08ff36014"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9294),
                            Name = "Địa lý",
                            RecordStatus = 0,
                            TagImage = "https://www.aag.org/wp-content/uploads/2021/12/shutterstock_1111879247.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("79461e39-79e2-410c-b4b0-e0eacd7761d9"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9296),
                            Name = "Triết học",
                            RecordStatus = 0,
                            TagImage = "https://www.rollingstone.com/wp-content/uploads/2024/01/unlocking_the_power_why_you_should_consider_hiring_philosophy_graduates-.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("45635113-ece4-443d-a0b0-60c399a57bf3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9298),
                            Name = "Sống Ảo",
                            RecordStatus = 0,
                            TagImage = "https://imagev3.vietnamplus.vn/w1000/Uploaded/2024/hotnnz/2024_08_13/song-ao3-6646.jpg.webp",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("f6967e2b-126e-477d-a3bb-8942344d8700"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9299),
                            Name = "Quản lý cân nặng",
                            RecordStatus = 0,
                            TagImage = "https://thanhnien.mediacdn.vn/Uploaded/minhnguyet/2022_05_10/an-kieng-9141.jpg",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("605d27e2-b9a4-4793-8d5b-3498b4e5c1ac"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9301),
                            Name = "Phát triển cơ bắp",
                            RecordStatus = 0,
                            TagImage = "https://www.dmoose.com/cdn/shop/articles/feature-image_87a28752-6da3-4be8-8814-d5221236136d.jpg?v=1676644951",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("0c93538c-5c00-42b6-baac-2e7b6836b176"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9302),
                            Name = "Có body chuẩn chỉnh",
                            RecordStatus = 0,
                            TagImage = "https://cdn.nhathuoclongchau.com.vn/unsafe/800x0/https://cms-prod.s3-sgn09.fptcloud.com/fitness_la_gi_loi_ich_va_phuong_phap_tap_luyen_fitness_1_3c4e094223.png",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("61741640-580d-4acf-9bfe-f01f6404b319"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9303),
                            Name = "Phòng tránh bệnh",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv509Yw7GUN5twNNk4G5Pvu1TBqFmhrL_3UQ&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("d1ff8db9-249f-4016-805d-9e0d61eaf537"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9306),
                            Name = "Cải thiện tình trạng bệnh",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv509Yw7GUN5twNNk4G5Pvu1TBqFmhrL_3UQ&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("d6eeb511-1c79-4f45-8082-70f6d4a7850a"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9307),
                            Name = "Tăng cảm giác hạnh phúc, giảm căng thẳng",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8ZXc_bemAYbupxmGz0pZGy4L1Zr6hGVsYdA&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("92e577c3-6af9-45b0-a05f-81eaf37551e8"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9309),
                            Name = "Cải thiện sự dẻo dai",
                            RecordStatus = 0,
                            TagImage = "https://cdn.shopify.com/s/files/1/0453/0381/files/fullsizeoutput_2d4_1024x1024.jpg?v=1662646979",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("8053cfb5-95e6-446c-82b5-a1f132924514"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9310),
                            Name = "Cải thiện sức bền",
                            RecordStatus = 0,
                            TagImage = "https://vinmec-prod.s3.amazonaws.com/images/20210524_085806_814180_chay-bo-bao-nhieu-cal.max-800x800.jpg",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("a6f1c6d5-788b-4b3d-b33c-1d21f586d2f3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9311),
                            Name = "Cải thiện sức khỏe tổng quát",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcThCjFemkP0h0IZYpu31k-xGK9IvigaysteqA&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("3d4f0adc-fa91-4719-b6a7-22448461034b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9312),
                            Name = "Yoga / Pilates",
                            RecordStatus = 0,
                            TagImage = "https://thamtapyoga.vn/wp-content/uploads/2024/01/3-2.jpeg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("babd1031-c47a-4155-a6df-5e2168c27750"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9314),
                            Name = "Calisthenic",
                            RecordStatus = 0,
                            TagImage = "https://cdn.nhathuoclongchau.com.vn/unsafe/800x0/https://cms-prod.s3-sgn09.fptcloud.com/giai_dap_thac_mac_calisthenics_khac_gi_gym_1_8d5dd4026b.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("8d743caf-2ef4-4b51-93e2-3a9b62f8d001"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9315),
                            Name = "Tập sức mạnh",
                            RecordStatus = 0,
                            TagImage = "https://www.thethaothientruong.vn/uploads/2020/Powerlifting-la-gi.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("5cc8cca2-56c3-4e8e-bac1-be7eed5a49d8"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9318),
                            Name = "Cardio",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/1000308068/file/tap-cardio-vao-luc-nao-la-hieu-qua-nhat_cb884317c05d4df980138121ee113112_grande.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("f2b76847-1c18-449b-9440-e1939a840222"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9319),
                            Name = "HIIT",
                            RecordStatus = 0,
                            TagImage = "https://hips.hearstapps.com/hmg-prod/images/athletes-doing-push-ups-with-dumbbells-on-floor-royalty-free-image-1638463573.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("026c9bf5-1976-414d-90b4-ae7aa69906b3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9320),
                            Name = "Kickfit",
                            RecordStatus = 0,
                            TagImage = "https://storage.googleapis.com/leep_app_website/2020/11/Kick-fit-khong-phai-la-kick-boxing.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("72c26106-5037-4400-8068-97e0fc06f8d9"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9321),
                            Name = "Tập ép dẻo",
                            RecordStatus = 0,
                            TagImage = "https://prod-everyoneactive-wp.s3.eu-west-2.amazonaws.com/wp-content/uploads/2020/03/23151503/flexibility-at-home.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("6b6a1ebf-2548-4ba9-b2f3-74ee4058d76c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9324),
                            Name = "Thể dục nhịp điệu, theo nhạc",
                            RecordStatus = 0,
                            TagImage = "https://i.vietgiaitri.com/2018/10/9/the-duc-nhip-dieu-b2ab9f.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("bcef80ba-3744-4cb4-b1e2-872d7f517da9"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9325),
                            Name = "Cùng giới",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("f775f955-f6d7-4e82-8c49-988bde1aec73"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9326),
                            Name = "Khác giới",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("d3dc082f-9580-4f20-a7f9-a3d096b284bb"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9327),
                            Name = "Ngoại hình đẹp",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("ef557231-8fce-4c09-9a9a-4f929c3920e4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9330),
                            Name = "Giá rẻ",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("2344a487-1cab-410b-ae84-54d531e2d739"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9331),
                            Name = "Gần",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("ced8a812-2076-424d-a6bf-e536dcf37a20"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9332),
                            Name = "Tâm huyết với học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("884a7e85-5cfd-4af8-9ed7-c1e60c2ba599"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9333),
                            Name = "Có trách nhiệm",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("0f313c7e-36fe-4c2c-a5c7-03fd52c8d29f"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9334),
                            Name = "Có kinh nghiệm",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("e76263db-10f6-4583-93da-22b4a03084be"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9336),
                            Name = "Không nặng nề với học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("5fa59548-dab3-49e2-9525-a4129bbe4327"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9337),
                            Name = "Giàu kiến thức",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("912d263e-5466-48c5-b760-37e23c484a60"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9338),
                            Name = "Luôn sẵn sàng tư vấn ngoài giờ",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("768e495d-2c65-4467-90ab-320dfb6ddcba"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9371),
                            Name = "Biết truyền cảm hứng, tạo động lực",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("0aef0faf-db54-496e-9814-c53d2f2aed37"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9373),
                            Name = "Đảm bảo mục tiêu cho học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("f698cba5-fa3a-4c14-9c6d-c5ddc3ceff40"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9374),
                            Name = "Kiên trì",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("c6b3b650-2469-4b83-81d5-a97136162182"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9375),
                            Name = "Siêng năng",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("4358d71c-71c9-482d-b5a0-90a26f95e272"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9377),
                            Name = "Vui tính, hài hước",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("36f5ec40-8e7b-4579-81bb-62afb0641dcb"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9378),
                            Name = "Hòa đồng",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("b1e2fe75-c015-43ec-a091-21ee3cb20828"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9379),
                            Name = "Năng động",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("b5b3769e-560d-45f6-bd0f-9d3b44b63ff4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9381),
                            Name = "Dễ gần",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("d0757b7a-e694-4ea4-a4d2-c0b991bb7111"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9383),
                            Name = "Thi thoảng bất thường",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("3e0874c3-9d6c-4f78-95db-40ec27f38735"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9385),
                            Name = "Lạnh lùng, ít nói",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("6dea1c5e-5b7a-459a-b653-2ba8655267a7"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9386),
                            Name = "Nhút nhát",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("ee2d2162-1351-4e2c-8dfb-79a31711d517"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9387),
                            Name = "Nhạy cảm",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("7853ad68-a792-429f-91ad-7c38b55cde77"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9388),
                            Name = "Dễ nản",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("c6210779-4926-4eb9-ad4d-b64f022b75fd"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9390),
                            Name = "Hay bị lười",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("bf28c84b-9f4b-424b-a206-6290a9c36504"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9391),
                            Name = "Sẵn sàng học hỏi",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("7f8d7e37-628d-458d-a651-02a34aed82eb"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9392),
                            Name = "Hiền lành",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("ab230182-23e1-4bc3-8278-141720845270"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9394),
                            Name = "Rảnh rỗi",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("6632d3a3-16a7-4894-839a-1e272582cdaa"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9395),
                            Name = "Cầu toàn",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("6f245dce-fc7b-4be0-8f04-1ab2abc930fc"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9397),
                            Name = "Thoải mái",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("ad1d3642-d1e3-4267-9968-f894c6285405"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9398),
                            Name = "Dễ bị khó chịu",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("2e3ba8da-4898-479b-973d-701a84b2dbc4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9399),
                            Name = "Độc thân lâu năm",
                            RecordStatus = 0,
                            TagType = 4
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<string>("PTId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TraineeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PTId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TranscationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFireBaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserFireBaseId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.TransactionSlot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionSlots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.User", b =>
                {
                    b.Property<string>("FireBaseId")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<int?>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<string>("PTDegreeImageUrl")
                        .HasColumnType("text");

                    b.Property<double?>("PTExperienceYear")
                        .HasColumnType("double precision");

                    b.Property<int?>("PTStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<double>("PricePerHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0.0);

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<int?>("SubscriptionLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("SubscriptionPaymentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubscriptionPurchasedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ward")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("FireBaseId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            FireBaseId = "123abc",
                            AvatarUrl = "https://example.com/avatar1.jpg",
                            Balance = 1000,
                            Bio = "Fitness enthusiast and certified personal trainer.",
                            City = "New York",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9048),
                            DateOfBirth = new DateTime(1990, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Manhattan",
                            Email = "john.doe@example.com",
                            Gender = 0,
                            Height = 180.30000000000001,
                            Id = new Guid("ee721eaa-5327-4776-9f3a-f54dc81e1070"),
                            Job = "Student",
                            Password = "hashedpassword1",
                            Phone = "1234567890",
                            PricePerHour = 0.0,
                            RecordStatus = 0,
                            Role = 0,
                            Status = 0,
                            Street = "5th Avenue",
                            UserName = "john doe",
                            Ward = "Ward 5",
                            Weight = 75.5
                        },
                        new
                        {
                            FireBaseId = "456def",
                            AvatarUrl = "https://example.com/avatar2.jpg",
                            Balance = 1500,
                            Bio = "Yoga instructor with a passion for holistic health.",
                            City = "Los Angeles",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9124),
                            DateOfBirth = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Beverly Hills",
                            Email = "jane.smith@example.com",
                            Gender = 1,
                            Height = 170.19999999999999,
                            Id = new Guid("256c9c22-a980-44ee-a6e6-291cbcfdde00"),
                            Job = "Yoga Instructor",
                            PTExperienceYear = 3.5,
                            PTStatus = 1,
                            Password = "hashedpassword2",
                            Phone = "0987654321",
                            PricePerHour = 100000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Rodeo Drive",
                            SubscriptionLevel = 1,
                            SubscriptionPaymentStatus = 0,
                            SubscriptionPurchasedDate = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "jane smith",
                            Ward = "Ward 3",
                            Weight = 65.0
                        },
                        new
                        {
                            FireBaseId = "789ghi",
                            AvatarUrl = "https://example.com/avatar3.jpg",
                            Balance = 2000,
                            Bio = "Aspiring bodybuilder and nutrition expert.",
                            City = "Chicago",
                            CreatedDate = new DateTime(2024, 9, 27, 15, 29, 16, 816, DateTimeKind.Utc).AddTicks(9135),
                            DateOfBirth = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            District = "Lincoln Park",
                            Email = "alex.jones@example.com",
                            Gender = 0,
                            Height = 185.40000000000001,
                            Id = new Guid("a6b29f5b-85f5-4862-ae31-80de282a4fe1"),
                            Job = "Nutritionist",
                            PTExperienceYear = 2.0,
                            PTStatus = 0,
                            Password = "hashedpassword3",
                            Phone = "5551234567",
                            PricePerHour = 150000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            Street = "Clark Street",
                            UserName = "alex jones",
                            Ward = "Ward 7",
                            Weight = 85.0
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedias");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.FeedbackImage", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Training", "Training")
                        .WithMany("FeedbackImages")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Reporter")
                        .WithMany("ReportsCreated")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Target")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reporter");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ReportImage", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Report", "Report")
                        .WithMany("ReportImages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "CreateBy")
                        .WithMany("SlotsCreated")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Training", "Training")
                        .WithMany("Slots")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateBy");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.SlotVideos", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Slot", "Slot")
                        .WithMany("Videos")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "CreateBy")
                        .WithMany("TagsCreated")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "PT")
                        .WithMany("TrainingsInstructing")
                        .HasForeignKey("PTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Trainee")
                        .WithMany("TrainingsAttending")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PT");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserFireBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.TransactionSlot", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Slot", "Slot")
                        .WithMany("TransactionSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Transaction", "Transaction")
                        .WithMany("TransactionSlots")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserMedia", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserTag", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.Navigation("ReportImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.Navigation("TransactionSlots");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.Navigation("FeedbackImages");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.Navigation("TransactionSlots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.User", b =>
                {
                    b.Navigation("ReportsCreated");

                    b.Navigation("ReportsReceived");

                    b.Navigation("SlotsCreated");

                    b.Navigation("TagsCreated");

                    b.Navigation("TrainingsAttending");

                    b.Navigation("TrainingsInstructing");

                    b.Navigation("Transactions");

                    b.Navigation("UserMedias");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using FitSwipe.DataAccess.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitSwipe.DataAccess.Migrations
{
    [DbContext(typeof(FitSwipeDbContext))]
    partial class FitSwipeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Params")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b73346f-5832-40e1-ae5e-b5167f0c54ed"),
                            Body = "Chào mừng bạn đến với FitWipe! Kính gửi [Name], vui lòng xác nhận địa chỉ email của bạn bằng cách nhấn vào đường link sau: <a href=\"[VerificationLink]\">Xác nhận Email</a>.<br><br>Cảm ơn bạn đã tham gia cùng chúng tôi!<br><br>Đội ngũ FitWipe",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9626),
                            Description = "Email này được gửi để xác nhận đăng ký tài khoản FitWipe.",
                            Name = "Register_Mail",
                            Params = "[Name], [VerificationLink]",
                            RecordStatus = 0,
                            Status = true,
                            Subject = "Chào mừng đến với FitWipe! Vui lòng xác nhận email của bạn"
                        },
                        new
                        {
                            Id = new Guid("4f8edc52-77c5-441b-ac63-9ee6b36ff0ac"),
                            Body = "Chúng tôi đã nhận được yêu cầu đặt lại mật khẩu cho tài khoản của bạn tại FitWipe. Kính gửi [Name], vui lòng đặt lại mật khẩu của bạn bằng cách nhấn vào đường link sau: <a href=\"[ResetPasswordLink]\">Đặt lại mật khẩu</a>.<br><br>Nếu bạn không yêu cầu việc này, vui lòng bỏ qua email này.<br><br>Đội ngũ FitWipe",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9646),
                            Description = "Email này được gửi khi người dùng yêu cầu đặt lại mật khẩu cho tài khoản FitWipe.",
                            Name = "Forgot_Password",
                            Params = "[Name], [ResetPasswordLink]",
                            RecordStatus = 0,
                            Status = true,
                            Subject = "Yêu cầu đặt lại mật khẩu FitWipe"
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.FeedbackImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("FeedbackImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFirebaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("UserFirebaseId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TargetId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ReportImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int?>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("TrainingId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.SlotVideos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("SlotVideos");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialTag")
                        .HasColumnType("integer");

                    b.Property<string>("TagImage")
                        .HasColumnType("text");

                    b.Property<int>("TagType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c04281a-b281-4661-8354-9def2fa0392c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9361),
                            Name = "Bóng đá",
                            RecordStatus = 0,
                            TagImage = "https://cdn.tuoitre.vn/ttct//2020/12/13/16078750289060-lich-thi-dau-bong-da-hom-nay-0211.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("12078107-6b0f-4db3-955a-a158b3c544ba"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9363),
                            Name = "Bơi lội",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/1000391576/file/boi_loi_7d4d69c53ac1494eabb2a446d4d503a0_grande.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("860c9208-ca19-4fcf-9226-5d21c6da6833"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9365),
                            Name = "Cầu Lông",
                            RecordStatus = 0,
                            TagImage = "https://vecgroup.vn/images/products/2021/08/24/large/qua-cau-long_1629778779.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("71907e0d-92f6-4f1c-9d4d-77a9af8da71f"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9367),
                            Name = "Bóng chuyền",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/200000333667/article/image.jpg_4b1e1c8ce20f4c32824f275f34ff30af_1024x1024.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("958ce2dd-e63e-4e93-9a9b-df4baf5d98de"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9369),
                            Name = "Bóng rổ",
                            RecordStatus = 0,
                            TagImage = "https://thethaothienlong.vn/wp-content/uploads/2022/04/Kich-thuoc-qua-bong-ro-1.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("0126e6d2-97df-4d70-95eb-983985ba630c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9373),
                            Name = "Thể thao nói chung",
                            RecordStatus = 0,
                            TagImage = "https://llv.edu.vn/media/2018/09/iStock-949190756-800x440.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("13ad0701-16f3-4f59-8d3a-47f18e475983"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9375),
                            Name = "Bida",
                            RecordStatus = 0,
                            TagImage = "https://billiardshoanthuy.vn/wp-content/uploads/2021/05/phu-kien-ban-bida-2.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("67d788b6-e9e3-48f5-837a-3230e67989fb"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9377),
                            Name = "Tập Gym",
                            RecordStatus = 0,
                            TagImage = "https://tiki.vn/blog/wp-content/uploads/2023/07/elite-fitness-1024x583.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("835133b1-06b7-4b04-b2d1-052ac7b7c379"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9379),
                            Name = "Đi, chạy bộ",
                            RecordStatus = 0,
                            TagImage = "https://pos.nvncdn.com/be3294-43017/art/artCT/20230228_9uObLfWys7Q0IXe4.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("4db0ebec-8ee0-44b8-93f9-088faf6e4b0b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9380),
                            Name = "Phim ảnh",
                            RecordStatus = 0,
                            TagImage = "https://lawnet.vn/uploads/image/2023/10/17/015815855.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("b501e425-f95f-4f68-b527-67d94f16bec7"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9382),
                            Name = "Truyện tranh",
                            RecordStatus = 0,
                            TagImage = "https://taschen.makaira.media/taschen/image/upload/f_webp,w_1200/v1673462260/products-live/a3d446fb0046b587eb0ed76edca3f4d6.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("910af901-d1be-4f10-acb3-82ecdacffc56"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9384),
                            Name = "Du lịch",
                            RecordStatus = 0,
                            TagImage = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/18/4f/7d/fc/caption.jpg?w=1200&h=1200&s=1",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("2adaaa73-d514-4c59-a645-dd559b92056a"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9385),
                            Name = "Thể thao trí tuệ",
                            RecordStatus = 0,
                            TagImage = "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/ChessSet.jpg/640px-ChessSet.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("ef2095d0-882e-4c6c-96cf-076b79e20320"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9389),
                            Name = "Đọc sách",
                            RecordStatus = 0,
                            TagImage = "https://images.theconversation.com/files/45159/original/rptgtpxd-1396254731.jpg?ixlib=rb-4.1.0&q=45&auto=format&w=1356&h=668&fit=crop",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("294f2331-3eb0-4463-ad87-294329663c32"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9391),
                            Name = "Khoa học",
                            RecordStatus = 0,
                            TagImage = "https://www.training.com.au/wp-content/uploads/science-stem-feature.png",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("b94cf48f-92ac-4d36-aecb-9a5986dc7f28"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9392),
                            Name = "Game",
                            RecordStatus = 0,
                            TagImage = "https://genk.mediacdn.vn/139269124445442048/2022/7/28/tmb-1658998970448906989995.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("97e34152-dcc7-4b2c-94c4-8db1eab790a6"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9394),
                            Name = "Nhiếp ảnh",
                            RecordStatus = 0,
                            TagImage = "https://aaftonline.com/blog/wp-content/uploads/2024/01/What-are-the-Benefits-of-Photography-Complete-Overview.png",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("886d219f-e887-4b9f-bff9-b06940c2194f"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9396),
                            Name = "Hội họa",
                            RecordStatus = 0,
                            TagImage = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/1200px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("dc7acad6-345c-489f-86bc-f0b8ee61e8b0"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9397),
                            Name = "Nghe nhạc",
                            RecordStatus = 0,
                            TagImage = "https://static.vecteezy.com/system/resources/thumbnails/037/044/052/small_2x/ai-generated-studio-shot-of-black-headphones-over-music-note-explosion-background-with-empty-space-for-text-photo.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("83467ce9-2e83-42c4-9750-08ae936c0707"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9399),
                            Name = "Chơi nhạc cụ",
                            RecordStatus = 0,
                            TagImage = "https://t3.ftcdn.net/jpg/01/34/38/92/360_F_134389281_5Jak3tbsoDggHIfIKKwJ8L7064ACIMNE.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("e5595468-7d02-4d1f-b0cd-ed86c1aa6d80"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9401),
                            Name = "Tán gẫu",
                            RecordStatus = 0,
                            TagImage = "https://transcode-v2.app.engoo.com/image/fetch/f_auto,c_lfill,w_300,dpr_3/https://assets.app.engoo.com/images/rGTEEA2fm66YMzeJz2UbwkKOW62bZVlqKOKZrXlMN7g.jpeg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("f53a0a95-85e0-497c-835a-b0aac370e5c6"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9404),
                            Name = "Công nghệ",
                            RecordStatus = 0,
                            TagImage = "https://www.simplilearn.com/ice9/free_resources_article_thumb/Technology_Trends.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("e9168ca8-2af2-45a7-abe6-b07bb29c4603"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9406),
                            Name = "Lịch Sử",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRWz_tIgvQXPAaSmvYa7CqZo_biaRK9D_O8uA&s",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("8753c157-11a3-46f0-8ade-69a06a46730e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9408),
                            Name = "Địa lý",
                            RecordStatus = 0,
                            TagImage = "https://www.aag.org/wp-content/uploads/2021/12/shutterstock_1111879247.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("373b2c96-6c0f-4d9b-a642-d94eef9e03e2"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9410),
                            Name = "Triết học",
                            RecordStatus = 0,
                            TagImage = "https://www.rollingstone.com/wp-content/uploads/2024/01/unlocking_the_power_why_you_should_consider_hiring_philosophy_graduates-.jpg",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("ba81f370-15be-4ff4-a8bd-a848f8a3f681"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9411),
                            Name = "Sống Ảo",
                            RecordStatus = 0,
                            TagImage = "https://imagev3.vietnamplus.vn/w1000/Uploaded/2024/hotnnz/2024_08_13/song-ao3-6646.jpg.webp",
                            TagType = 0
                        },
                        new
                        {
                            Id = new Guid("8a0cebf0-28fd-4b1d-a8e8-b5a25f688f24"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9413),
                            Name = "Quản lý cân nặng",
                            RecordStatus = 0,
                            TagImage = "https://thanhnien.mediacdn.vn/Uploaded/minhnguyet/2022_05_10/an-kieng-9141.jpg",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("f9bda7ca-f857-475a-b7e0-de6f12abbe70"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9415),
                            Name = "Phát triển cơ bắp",
                            RecordStatus = 0,
                            TagImage = "https://www.dmoose.com/cdn/shop/articles/feature-image_87a28752-6da3-4be8-8814-d5221236136d.jpg?v=1676644951",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("2b5418e1-23fc-4987-94f9-efe76e234d15"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9416),
                            Name = "Có body chuẩn chỉnh",
                            RecordStatus = 0,
                            TagImage = "https://cdn.nhathuoclongchau.com.vn/unsafe/800x0/https://cms-prod.s3-sgn09.fptcloud.com/fitness_la_gi_loi_ich_va_phuong_phap_tap_luyen_fitness_1_3c4e094223.png",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("64a3b221-5e5c-4a60-a590-75223f5ed073"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9420),
                            Name = "Phòng tránh bệnh",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv509Yw7GUN5twNNk4G5Pvu1TBqFmhrL_3UQ&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("cca509be-d324-4561-9626-c2b2100d4971"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9422),
                            Name = "Cải thiện tình trạng bệnh",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv509Yw7GUN5twNNk4G5Pvu1TBqFmhrL_3UQ&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("e72ba411-6498-4289-9688-d6a8aeffbf51"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9423),
                            Name = "Tăng cảm giác hạnh phúc, giảm căng thẳng",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8ZXc_bemAYbupxmGz0pZGy4L1Zr6hGVsYdA&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("e514cdbd-dc78-435e-84b8-3d299c438757"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9425),
                            Name = "Cải thiện sự dẻo dai",
                            RecordStatus = 0,
                            TagImage = "https://cdn.shopify.com/s/files/1/0453/0381/files/fullsizeoutput_2d4_1024x1024.jpg?v=1662646979",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("74f1d5da-dc53-4bc0-b853-7456cfb07451"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9427),
                            Name = "Cải thiện sức bền",
                            RecordStatus = 0,
                            TagImage = "https://vinmec-prod.s3.amazonaws.com/images/20210524_085806_814180_chay-bo-bao-nhieu-cal.max-800x800.jpg",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("a742a330-df4a-48dc-a527-8ca591b2f5be"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9428),
                            Name = "Cải thiện sức khỏe tổng quát",
                            RecordStatus = 0,
                            TagImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcThCjFemkP0h0IZYpu31k-xGK9IvigaysteqA&s",
                            TagType = 1
                        },
                        new
                        {
                            Id = new Guid("897d2b8d-7dda-436d-8e5a-8f00b9a44c0b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9430),
                            Name = "Yoga / Pilates",
                            RecordStatus = 0,
                            TagImage = "https://thamtapyoga.vn/wp-content/uploads/2024/01/3-2.jpeg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("8c6c797c-05ca-4dcb-8916-617b32b96f97"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9432),
                            Name = "Calisthenic",
                            RecordStatus = 0,
                            TagImage = "https://cdn.nhathuoclongchau.com.vn/unsafe/800x0/https://cms-prod.s3-sgn09.fptcloud.com/giai_dap_thac_mac_calisthenics_khac_gi_gym_1_8d5dd4026b.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("192c1aff-2824-4ca8-810f-93eb3bfc27aa"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9435),
                            Name = "Tập sức mạnh",
                            RecordStatus = 0,
                            TagImage = "https://www.thethaothientruong.vn/uploads/2020/Powerlifting-la-gi.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("69775cef-6a20-4e60-a512-face25b6c5df"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9443),
                            Name = "Cardio",
                            RecordStatus = 0,
                            TagImage = "https://file.hstatic.net/1000308068/file/tap-cardio-vao-luc-nao-la-hieu-qua-nhat_cb884317c05d4df980138121ee113112_grande.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("54769045-a1ec-4587-b327-2540218451ae"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9444),
                            Name = "HIIT",
                            RecordStatus = 0,
                            TagImage = "https://hips.hearstapps.com/hmg-prod/images/athletes-doing-push-ups-with-dumbbells-on-floor-royalty-free-image-1638463573.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("181be059-e215-4d17-96cb-8038cd8c119b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9446),
                            Name = "Kickfit",
                            RecordStatus = 0,
                            TagImage = "https://storage.googleapis.com/leep_app_website/2020/11/Kick-fit-khong-phai-la-kick-boxing.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("6312f598-2f75-479a-a0f6-5d1a729aaa6f"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9448),
                            Name = "Tập ép dẻo",
                            RecordStatus = 0,
                            TagImage = "https://prod-everyoneactive-wp.s3.eu-west-2.amazonaws.com/wp-content/uploads/2020/03/23151503/flexibility-at-home.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("ea11f29e-fa79-4ba0-aa85-8fd6b920d6d9"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9450),
                            Name = "Thể dục nhịp điệu, theo nhạc",
                            RecordStatus = 0,
                            TagImage = "https://i.vietgiaitri.com/2018/10/9/the-duc-nhip-dieu-b2ab9f.jpg",
                            TagType = 2
                        },
                        new
                        {
                            Id = new Guid("75152778-5e13-4d40-876a-3c7d359ab712"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9451),
                            Name = "Cùng giới",
                            RecordStatus = 0,
                            SpecialTag = 1,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("a5eb34d9-315e-42d3-b33c-12e0c5f607d7"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9453),
                            Name = "Khác giới",
                            RecordStatus = 0,
                            SpecialTag = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("9dc43fd6-f9de-438a-a4a3-0af5f0276d06"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9457),
                            Name = "Ngoại hình đẹp",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("e23372e9-e33b-485b-9b0f-bc42859cb214"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9458),
                            Name = "Cung cấp giá cả phải chăng",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("70548b7b-2776-4b9a-9e5e-9f431c8097e2"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9460),
                            Name = "Gần",
                            RecordStatus = 0,
                            SpecialTag = 2,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("2708f7c9-2417-4daa-9ee9-743c780c5b37"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9462),
                            Name = "Tâm huyết với học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("5852e363-0dfa-494d-a316-af325fcf4172"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9464),
                            Name = "Có trách nhiệm",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("c41bc5a5-69f3-47d6-88c4-c5cb79b21db3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9465),
                            Name = "Có kinh nghiệm",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("07b0e226-51b1-469e-a21f-a97730b6e29e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9467),
                            Name = "Không nặng nề với học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("29d73e01-f8d9-4fd1-8f34-5df2d38a3b05"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9469),
                            Name = "Giàu kiến thức",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("e5e092d0-b089-47e0-b643-63fa62401edf"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9472),
                            Name = "Luôn sẵn sàng tư vấn ngoài giờ",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("e98630e2-b975-4d75-8ed5-c74debdf0f3a"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9473),
                            Name = "Biết truyền cảm hứng, tạo động lực",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("c29235a1-120f-437c-9746-88ccdfe49361"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9475),
                            Name = "Đảm bảo mục tiêu cho học viên",
                            RecordStatus = 0,
                            TagType = 3
                        },
                        new
                        {
                            Id = new Guid("1b340c12-a9b7-45e9-bfcb-f21adaa61284"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9477),
                            Name = "Kiên trì",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("b196b1f6-c87b-434b-a4a2-7ec8cceaad4c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9478),
                            Name = "Siêng năng",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("2a6348df-932d-46d3-98bd-adc7316dadb3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9480),
                            Name = "Vui tính, hài hước",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("5448dc38-ba73-4f92-9834-4d04bb9d9c4d"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9482),
                            Name = "Hòa đồng",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("c7a1c458-fe4f-4f19-9fb2-f12b04a90e7b"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9483),
                            Name = "Năng động",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("44917e4b-2896-4609-aee0-03d5f03239b3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9486),
                            Name = "Dễ gần",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("898202c3-19ef-4510-9eda-c24a8460a4f4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9488),
                            Name = "Thi thoảng bất thường",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("df57334c-77f4-4f98-98fb-73b1c49bbead"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9489),
                            Name = "Lạnh lùng, ít nói",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("12090aed-1f54-4254-ae7d-2f0db8d9c6cf"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9491),
                            Name = "Nhút nhát",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("e023d325-dabb-4ce1-9a76-63343e5d2d76"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9493),
                            Name = "Nhạy cảm",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("de67f49e-57a1-4419-94a1-32788cf96db3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9494),
                            Name = "Dễ nản",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("ed9c94ed-e176-495e-9a49-42added8b0bd"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9496),
                            Name = "Hay bị lười",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("6a17c623-7ae7-4403-8332-67382f3bcf0c"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9497),
                            Name = "Sẵn sàng học hỏi",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("5daa8488-988a-4125-9964-2c152b88d856"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9501),
                            Name = "Hiền lành",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("be4eee71-47b0-4568-8b2e-efd87ac3eab3"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9502),
                            Name = "Rảnh rỗi",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("fa0d0be6-e28a-4d7e-b04e-33428c2f5ee1"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9504),
                            Name = "Cầu toàn",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("5f465542-53cc-4c41-a767-96fd3df9c74e"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9505),
                            Name = "Thoải mái",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("3069a281-57a2-41a6-b9dd-bb19117b5af4"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9507),
                            Name = "Dễ bị khó chịu",
                            RecordStatus = 0,
                            TagType = 4
                        },
                        new
                        {
                            Id = new Guid("0e21cc2b-e01b-4d36-ab9c-77ddd1999dcc"),
                            CreateById = "123abc",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9508),
                            Name = "Độc thân lâu năm",
                            RecordStatus = 0,
                            TagType = 4
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<string>("PTId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PricePerSlot")
                        .HasColumnType("integer");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TraineeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PTId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TranscationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFireBaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserFireBaseId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.TransactionSlot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionSlots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.User", b =>
                {
                    b.Property<string>("FireBaseId")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<int?>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PTDegreeImageUrl")
                        .HasColumnType("text");

                    b.Property<double?>("PTExperienceYear")
                        .HasColumnType("double precision");

                    b.Property<double?>("PTRating")
                        .HasColumnType("double precision");

                    b.Property<int?>("PTStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<double>("PricePerHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0.0);

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("SubscriptionLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("SubscriptionPaymentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubscriptionPurchasedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("FireBaseId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            FireBaseId = "101jkl",
                            AvatarUrl = "https://i.ibb.co/QY6zDfp/pt3.png",
                            Balance = 3500,
                            Bio = "Certified yoga instructor and personal trainer with 5 years of experience.",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9062),
                            DateOfBirth = new DateTime(1988, 7, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "sarah.smith@example.com",
                            Gender = 0,
                            Height = 170.19999999999999,
                            Id = new Guid("579500ef-f95a-4af6-9bfb-95417f1cb9cb"),
                            Job = "Yoga Instructor",
                            Latitude = 40.712800000000001,
                            Longitude = -74.006,
                            PTExperienceYear = 5.0,
                            PTStatus = 1,
                            Password = "hashedpassword4",
                            Phone = "5559876543",
                            PricePerHour = 200000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            UserName = "jocker_lol",
                            Weight = 62.5
                        },
                        new
                        {
                            FireBaseId = "202mno",
                            AvatarUrl = "https://i.ibb.co/27LXG3q/pt4.png",
                            Balance = 2800,
                            Bio = "CrossFit enthusiast and certified personal trainer specializing in HIIT workouts.",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9101),
                            DateOfBirth = new DateTime(1995, 11, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mike.johnson@example.com",
                            Gender = 0,
                            Height = 180.0,
                            Id = new Guid("ad4de039-91d0-4566-b50c-2ad50baa81ee"),
                            Job = "CrossFit Trainer",
                            Latitude = 40.712800000000001,
                            Longitude = -74.006,
                            PTExperienceYear = 3.5,
                            PTStatus = 1,
                            Password = "hashedpassword5",
                            Phone = "5552468101",
                            PricePerHour = 180000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            UserName = "mike_johnson",
                            Weight = 78.299999999999997
                        },
                        new
                        {
                            FireBaseId = "303pqr",
                            AvatarUrl = "https://i.ibb.co/TWNFj0M/image.png",
                            Balance = 4200,
                            Bio = "Sports nutritionist and strength training coach with a focus on women's fitness.",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9107),
                            DateOfBirth = new DateTime(1990, 5, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "emma.davis@example.com",
                            Gender = 1,
                            Height = 165.5,
                            Id = new Guid("54aa3261-588d-47e5-94da-fcc4faddaef2"),
                            Job = "Strength Coach",
                            Latitude = 40.712800000000001,
                            Longitude = -74.006,
                            PTExperienceYear = 7.0,
                            PTStatus = 1,
                            Password = "hashedpassword6",
                            Phone = "5553691470",
                            PricePerHour = 220000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            UserName = "emma_davis",
                            Weight = 58.700000000000003
                        },
                        new
                        {
                            FireBaseId = "404stu",
                            AvatarUrl = "https://i.ibb.co/mR8n9zJ/pt2.png",
                            Balance = 3800,
                            Bio = "Former professional soccer player turned fitness coach. Specializes in sports-specific training.",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9113),
                            DateOfBirth = new DateTime(1987, 9, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "carlos.rodriguez@example.com",
                            Gender = 0,
                            Height = 175.30000000000001,
                            Id = new Guid("4083f14e-1896-46d5-b77c-2da56a511233"),
                            Job = "Sports Performance Coach",
                            Latitude = 40.712800000000001,
                            Longitude = -74.006,
                            PTExperienceYear = 6.5,
                            PTStatus = 1,
                            Password = "hashedpassword7",
                            Phone = "5557891234",
                            PricePerHour = 190000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            UserName = "carlos_rodriguez",
                            Weight = 75.799999999999997
                        },
                        new
                        {
                            FireBaseId = "505vwx",
                            AvatarUrl = "https://i.ibb.co/dDrHRqL/40c820d3e9d438025d4def0dedeab78a883cb8ab8c34614d1fb7d5ddf147668e-w-1024-h-1024-pmaid-165229888.png",
                            Balance = 3200,
                            Bio = "Pilates instructor and rehabilitation specialist. Focused on posture correction and core strength.",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9132),
                            DateOfBirth = new DateTime(1993, 2, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "lisa.chen@example.com",
                            Gender = 1,
                            Height = 162.0,
                            Id = new Guid("1ac57808-6b89-40c5-a91d-aca76d533758"),
                            Job = "Pilates Instructor",
                            Latitude = 40.712800000000001,
                            Longitude = -74.006,
                            PTExperienceYear = 4.0,
                            PTStatus = 1,
                            Password = "hashedpassword8",
                            Phone = "5554567890",
                            PricePerHour = 175000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            UserName = "lisa_chen",
                            Weight = 54.200000000000003
                        },
                        new
                        {
                            FireBaseId = "606yza",
                            AvatarUrl = "https://i.ibb.co/QY6zDfp/pt3.png",
                            Balance = 4500,
                            Bio = "Bodybuilding champion and powerlifting coach. Specializes in muscle gain and strength training.",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9138),
                            DateOfBirth = new DateTime(1985, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "marcus.brown@example.com",
                            Gender = 0,
                            Height = 188.0,
                            Id = new Guid("b835fce0-eb54-435f-9edd-991cbabe6e9c"),
                            Job = "Strength and Conditioning Coach",
                            Latitude = 40.712800000000001,
                            Longitude = -74.006,
                            PTExperienceYear = 10.0,
                            PTStatus = 1,
                            Password = "hashedpassword9",
                            Phone = "5552345678",
                            PricePerHour = 230000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            UserName = "marcus_brown",
                            Weight = 90.5
                        },
                        new
                        {
                            FireBaseId = "707bcd",
                            AvatarUrl = "https://i.ibb.co/HYsHmpm/pt5.png",
                            Balance = 3900,
                            Bio = "Certified nutritionist and functional fitness trainer. Specializes in weight management and holistic health.",
                            CreatedDate = new DateTime(2024, 10, 14, 12, 46, 3, 245, DateTimeKind.Utc).AddTicks(9151),
                            DateOfBirth = new DateTime(1991, 12, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "will.taylor@example.com",
                            Gender = 0,
                            Height = 168.5,
                            Id = new Guid("c0872c86-fac0-47d8-ae18-974803a89093"),
                            Job = "Functional Fitness Trainer",
                            Latitude = 40.712800000000001,
                            Longitude = -74.006,
                            PTExperienceYear = 3.5,
                            PTStatus = 1,
                            Password = "hashedpassword10",
                            Phone = "5558765432",
                            PricePerHour = 195000.0,
                            RecordStatus = 0,
                            Role = 1,
                            Status = 0,
                            UserName = "will_taylor",
                            Weight = 60.100000000000001
                        });
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserChatRoom", b =>
                {
                    b.Property<string>("UserFirebaseId")
                        .HasColumnType("text");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserFirebaseId", "ChatRoomId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("UserChatRooms");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedias");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.FeedbackImage", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Training", "Training")
                        .WithMany("FeedbackImages")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Message", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserFirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Reporter")
                        .WithMany("ReportsCreated")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Target")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reporter");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ReportImage", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Report", "Report")
                        .WithMany("ReportImages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "CreateBy")
                        .WithMany("SlotsCreated")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Training", "Training")
                        .WithMany("Slots")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateBy");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.SlotVideos", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Slot", "Slot")
                        .WithMany("Videos")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "CreateBy")
                        .WithMany("TagsCreated")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "PT")
                        .WithMany("TrainingsInstructing")
                        .HasForeignKey("PTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "Trainee")
                        .WithMany("TrainingsAttending")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PT");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserFireBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.TransactionSlot", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Slot", "Slot")
                        .WithMany("TransactionSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Transaction", "Transaction")
                        .WithMany("TransactionSlots")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserChatRoom", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserFirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserMedia", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.UserTag", b =>
                {
                    b.HasOne("FitSwipe.DataAccess.Model.Entity.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitSwipe.DataAccess.Model.Entity.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.ChatRoom", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Report", b =>
                {
                    b.Navigation("ReportImages");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Slot", b =>
                {
                    b.Navigation("TransactionSlots");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Tag", b =>
                {
                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Training", b =>
                {
                    b.Navigation("FeedbackImages");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.Transaction", b =>
                {
                    b.Navigation("TransactionSlots");
                });

            modelBuilder.Entity("FitSwipe.DataAccess.Model.Entity.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("ReportsCreated");

                    b.Navigation("ReportsReceived");

                    b.Navigation("SlotsCreated");

                    b.Navigation("TagsCreated");

                    b.Navigation("TrainingsAttending");

                    b.Navigation("TrainingsInstructing");

                    b.Navigation("Transactions");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserMedias");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}
